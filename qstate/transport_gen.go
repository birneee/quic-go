package qstate

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Transport) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "chosen_alpn":
			z.ChosenALPN, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ChosenALPN")
				return
			}
		case "vantage_point":
			z.VantagePoint, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VantagePoint")
				return
			}
		case "connection_ids":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ConnectionIDs")
				return
			}
			if cap(z.ConnectionIDs) >= int(zb0002) {
				z.ConnectionIDs = (z.ConnectionIDs)[:zb0002]
			} else {
				z.ConnectionIDs = make([]ConnectionID, zb0002)
			}
			for za0001 := range z.ConnectionIDs {
				err = z.ConnectionIDs[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ConnectionIDs", za0001)
					return
				}
			}
		case "remote_connection_ids":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RemoteConnectionIDs")
				return
			}
			if cap(z.RemoteConnectionIDs) >= int(zb0003) {
				z.RemoteConnectionIDs = (z.RemoteConnectionIDs)[:zb0003]
			} else {
				z.RemoteConnectionIDs = make([]ConnectionID, zb0003)
			}
			for za0002 := range z.RemoteConnectionIDs {
				err = z.RemoteConnectionIDs[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RemoteConnectionIDs", za0002)
					return
				}
			}
		case "dst_ip":
			z.DestinationIP, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DestinationIP")
				return
			}
		case "dst_port":
			z.DestinationPort, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "DestinationPort")
				return
			}
		case "parameters":
			err = z.Parameters.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Parameters")
				return
			}
		case "remote_parameters":
			err = z.RemoteParameters.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "RemoteParameters")
				return
			}
		case "idle_timeout":
			z.IdleTimeout, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "IdleTimeout")
				return
			}
		case "max_data":
			z.MaxData, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MaxData")
				return
			}
		case "remote_max_data":
			z.RemoteMaxData, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RemoteMaxData")
				return
			}
		case "sent_data":
			z.SentData, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SentData")
				return
			}
		case "received_data":
			z.ReceivedData, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReceivedData")
				return
			}
		case "max_bidirectional_streams":
			z.MaxBidirectionalStreams, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MaxBidirectionalStreams")
				return
			}
		case "max_unidirectional_streams":
			z.MaxUnidirectionalStreams, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MaxUnidirectionalStreams")
				return
			}
		case "remote_max_bidirectional_streams":
			z.RemoteMaxBidirectionalStreams, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RemoteMaxBidirectionalStreams")
				return
			}
		case "remote_max_unidirectional_streams":
			z.RemoteMaxUnidirectionalStreams, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RemoteMaxUnidirectionalStreams")
				return
			}
		case "next_unidirectional_stream":
			z.NextUnidirectionalStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "NextUnidirectionalStream")
				return
			}
		case "next_bidirectional_stream":
			z.NextBidirectionalStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "NextBidirectionalStream")
				return
			}
		case "remote_next_unidirectional_stream":
			z.RemoteNextUnidirectionalStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RemoteNextUnidirectionalStream")
				return
			}
		case "remote_next_bidirectional_stream":
			z.RemoteNextBidirectionalStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RemoteNextBidirectionalStream")
				return
			}
		case "streams":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Streams")
				return
			}
			if cap(z.Streams) >= int(zb0004) {
				z.Streams = (z.Streams)[:zb0004]
			} else {
				z.Streams = make([]Stream, zb0004)
			}
			for za0003 := range z.Streams {
				err = z.Streams[za0003].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Streams", za0003)
					return
				}
			}
		case "next_packet_number":
			z.NextPacketNumber, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "NextPacketNumber")
				return
			}
		case "highest_observed_packet_number":
			z.HighestObservedPacketNumber, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "HighestObservedPacketNumber")
				return
			}
		case "ack_ranges":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "AckRanges")
				return
			}
			if cap(z.AckRanges) >= int(zb0005) {
				z.AckRanges = (z.AckRanges)[:zb0005]
			} else {
				z.AckRanges = make([][2]int64, zb0005)
			}
			for za0004 := range z.AckRanges {
				var zb0006 uint32
				zb0006, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "AckRanges", za0004)
					return
				}
				if zb0006 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0006}
					return
				}
				for za0005 := range z.AckRanges[za0004] {
					z.AckRanges[za0004][za0005], err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "AckRanges", za0004, za0005)
						return
					}
				}
			}
		case "remote_ack_ranges":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RemoteAckRanges")
				return
			}
			if cap(z.RemoteAckRanges) >= int(zb0007) {
				z.RemoteAckRanges = (z.RemoteAckRanges)[:zb0007]
			} else {
				z.RemoteAckRanges = make([][2]int64, zb0007)
			}
			for za0006 := range z.RemoteAckRanges {
				var zb0008 uint32
				zb0008, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "RemoteAckRanges", za0006)
					return
				}
				if zb0008 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0008}
					return
				}
				for za0007 := range z.RemoteAckRanges[za0006] {
					z.RemoteAckRanges[za0006][za0007], err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "RemoteAckRanges", za0006, za0007)
						return
					}
				}
			}
		case "pending_acks":
			var zb0009 uint32
			zb0009, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PendingAcks")
				return
			}
			if cap(z.PendingAcks) >= int(zb0009) {
				z.PendingAcks = (z.PendingAcks)[:zb0009]
			} else {
				z.PendingAcks = make([]Packet, zb0009)
			}
			for za0008 := range z.PendingAcks {
				err = z.PendingAcks[za0008].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "PendingAcks", za0008)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Transport) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 28
	// write "version"
	err = en.Append(0xde, 0x0, 0x1c, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "chosen_alpn"
	err = en.Append(0xab, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x70, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.ChosenALPN)
	if err != nil {
		err = msgp.WrapError(err, "ChosenALPN")
		return
	}
	// write "vantage_point"
	err = en.Append(0xad, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.VantagePoint)
	if err != nil {
		err = msgp.WrapError(err, "VantagePoint")
		return
	}
	// write "connection_ids"
	err = en.Append(0xae, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ConnectionIDs)))
	if err != nil {
		err = msgp.WrapError(err, "ConnectionIDs")
		return
	}
	for za0001 := range z.ConnectionIDs {
		err = z.ConnectionIDs[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ConnectionIDs", za0001)
			return
		}
	}
	// write "remote_connection_ids"
	err = en.Append(0xb5, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.RemoteConnectionIDs)))
	if err != nil {
		err = msgp.WrapError(err, "RemoteConnectionIDs")
		return
	}
	for za0002 := range z.RemoteConnectionIDs {
		err = z.RemoteConnectionIDs[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RemoteConnectionIDs", za0002)
			return
		}
	}
	// write "dst_ip"
	err = en.Append(0xa6, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.DestinationIP)
	if err != nil {
		err = msgp.WrapError(err, "DestinationIP")
		return
	}
	// write "dst_port"
	err = en.Append(0xa8, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.DestinationPort)
	if err != nil {
		err = msgp.WrapError(err, "DestinationPort")
		return
	}
	// write "parameters"
	err = en.Append(0xaa, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = z.Parameters.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Parameters")
		return
	}
	// write "remote_parameters"
	err = en.Append(0xb1, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = z.RemoteParameters.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "RemoteParameters")
		return
	}
	// write "idle_timeout"
	err = en.Append(0xac, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.IdleTimeout)
	if err != nil {
		err = msgp.WrapError(err, "IdleTimeout")
		return
	}
	// write "max_data"
	err = en.Append(0xa8, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MaxData)
	if err != nil {
		err = msgp.WrapError(err, "MaxData")
		return
	}
	// write "remote_max_data"
	err = en.Append(0xaf, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RemoteMaxData)
	if err != nil {
		err = msgp.WrapError(err, "RemoteMaxData")
		return
	}
	// write "sent_data"
	err = en.Append(0xa9, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SentData)
	if err != nil {
		err = msgp.WrapError(err, "SentData")
		return
	}
	// write "received_data"
	err = en.Append(0xad, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReceivedData)
	if err != nil {
		err = msgp.WrapError(err, "ReceivedData")
		return
	}
	// write "max_bidirectional_streams"
	err = en.Append(0xb9, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MaxBidirectionalStreams)
	if err != nil {
		err = msgp.WrapError(err, "MaxBidirectionalStreams")
		return
	}
	// write "max_unidirectional_streams"
	err = en.Append(0xba, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MaxUnidirectionalStreams)
	if err != nil {
		err = msgp.WrapError(err, "MaxUnidirectionalStreams")
		return
	}
	// write "remote_max_bidirectional_streams"
	err = en.Append(0xd9, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RemoteMaxBidirectionalStreams)
	if err != nil {
		err = msgp.WrapError(err, "RemoteMaxBidirectionalStreams")
		return
	}
	// write "remote_max_unidirectional_streams"
	err = en.Append(0xd9, 0x21, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RemoteMaxUnidirectionalStreams)
	if err != nil {
		err = msgp.WrapError(err, "RemoteMaxUnidirectionalStreams")
		return
	}
	// write "next_unidirectional_stream"
	err = en.Append(0xba, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.NextUnidirectionalStream)
	if err != nil {
		err = msgp.WrapError(err, "NextUnidirectionalStream")
		return
	}
	// write "next_bidirectional_stream"
	err = en.Append(0xb9, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.NextBidirectionalStream)
	if err != nil {
		err = msgp.WrapError(err, "NextBidirectionalStream")
		return
	}
	// write "remote_next_unidirectional_stream"
	err = en.Append(0xd9, 0x21, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RemoteNextUnidirectionalStream)
	if err != nil {
		err = msgp.WrapError(err, "RemoteNextUnidirectionalStream")
		return
	}
	// write "remote_next_bidirectional_stream"
	err = en.Append(0xd9, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RemoteNextBidirectionalStream)
	if err != nil {
		err = msgp.WrapError(err, "RemoteNextBidirectionalStream")
		return
	}
	// write "streams"
	err = en.Append(0xa7, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Streams)))
	if err != nil {
		err = msgp.WrapError(err, "Streams")
		return
	}
	for za0003 := range z.Streams {
		err = z.Streams[za0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Streams", za0003)
			return
		}
	}
	// write "next_packet_number"
	err = en.Append(0xb2, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.NextPacketNumber)
	if err != nil {
		err = msgp.WrapError(err, "NextPacketNumber")
		return
	}
	// write "highest_observed_packet_number"
	err = en.Append(0xbe, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.HighestObservedPacketNumber)
	if err != nil {
		err = msgp.WrapError(err, "HighestObservedPacketNumber")
		return
	}
	// write "ack_ranges"
	err = en.Append(0xaa, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AckRanges)))
	if err != nil {
		err = msgp.WrapError(err, "AckRanges")
		return
	}
	for za0004 := range z.AckRanges {
		err = en.WriteArrayHeader(uint32(2))
		if err != nil {
			err = msgp.WrapError(err, "AckRanges", za0004)
			return
		}
		for za0005 := range z.AckRanges[za0004] {
			err = en.WriteInt64(z.AckRanges[za0004][za0005])
			if err != nil {
				err = msgp.WrapError(err, "AckRanges", za0004, za0005)
				return
			}
		}
	}
	// write "remote_ack_ranges"
	err = en.Append(0xb1, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.RemoteAckRanges)))
	if err != nil {
		err = msgp.WrapError(err, "RemoteAckRanges")
		return
	}
	for za0006 := range z.RemoteAckRanges {
		err = en.WriteArrayHeader(uint32(2))
		if err != nil {
			err = msgp.WrapError(err, "RemoteAckRanges", za0006)
			return
		}
		for za0007 := range z.RemoteAckRanges[za0006] {
			err = en.WriteInt64(z.RemoteAckRanges[za0006][za0007])
			if err != nil {
				err = msgp.WrapError(err, "RemoteAckRanges", za0006, za0007)
				return
			}
		}
	}
	// write "pending_acks"
	err = en.Append(0xac, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PendingAcks)))
	if err != nil {
		err = msgp.WrapError(err, "PendingAcks")
		return
	}
	for za0008 := range z.PendingAcks {
		err = z.PendingAcks[za0008].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "PendingAcks", za0008)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Transport) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 28
	// string "version"
	o = append(o, 0xde, 0x0, 0x1c, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint32(o, z.Version)
	// string "chosen_alpn"
	o = append(o, 0xab, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x70, 0x6e)
	o = msgp.AppendString(o, z.ChosenALPN)
	// string "vantage_point"
	o = append(o, 0xad, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	o = msgp.AppendString(o, z.VantagePoint)
	// string "connection_ids"
	o = append(o, 0xae, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ConnectionIDs)))
	for za0001 := range z.ConnectionIDs {
		o, err = z.ConnectionIDs[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ConnectionIDs", za0001)
			return
		}
	}
	// string "remote_connection_ids"
	o = append(o, 0xb5, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RemoteConnectionIDs)))
	for za0002 := range z.RemoteConnectionIDs {
		o, err = z.RemoteConnectionIDs[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RemoteConnectionIDs", za0002)
			return
		}
	}
	// string "dst_ip"
	o = append(o, 0xa6, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70)
	o = msgp.AppendString(o, z.DestinationIP)
	// string "dst_port"
	o = append(o, 0xa8, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74)
	o = msgp.AppendUint16(o, z.DestinationPort)
	// string "parameters"
	o = append(o, 0xaa, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	o, err = z.Parameters.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Parameters")
		return
	}
	// string "remote_parameters"
	o = append(o, 0xb1, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	o, err = z.RemoteParameters.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "RemoteParameters")
		return
	}
	// string "idle_timeout"
	o = append(o, 0xac, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	o = msgp.AppendInt64(o, z.IdleTimeout)
	// string "max_data"
	o = append(o, 0xa8, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendInt64(o, z.MaxData)
	// string "remote_max_data"
	o = append(o, 0xaf, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendInt64(o, z.RemoteMaxData)
	// string "sent_data"
	o = append(o, 0xa9, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendInt64(o, z.SentData)
	// string "received_data"
	o = append(o, 0xad, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendInt64(o, z.ReceivedData)
	// string "max_bidirectional_streams"
	o = append(o, 0xb9, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendInt64(o, z.MaxBidirectionalStreams)
	// string "max_unidirectional_streams"
	o = append(o, 0xba, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendInt64(o, z.MaxUnidirectionalStreams)
	// string "remote_max_bidirectional_streams"
	o = append(o, 0xd9, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendInt64(o, z.RemoteMaxBidirectionalStreams)
	// string "remote_max_unidirectional_streams"
	o = append(o, 0xd9, 0x21, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendInt64(o, z.RemoteMaxUnidirectionalStreams)
	// string "next_unidirectional_stream"
	o = append(o, 0xba, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.NextUnidirectionalStream)
	// string "next_bidirectional_stream"
	o = append(o, 0xb9, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.NextBidirectionalStream)
	// string "remote_next_unidirectional_stream"
	o = append(o, 0xd9, 0x21, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.RemoteNextUnidirectionalStream)
	// string "remote_next_bidirectional_stream"
	o = append(o, 0xd9, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.RemoteNextBidirectionalStream)
	// string "streams"
	o = append(o, 0xa7, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Streams)))
	for za0003 := range z.Streams {
		o, err = z.Streams[za0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Streams", za0003)
			return
		}
	}
	// string "next_packet_number"
	o = append(o, 0xb2, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendInt64(o, z.NextPacketNumber)
	// string "highest_observed_packet_number"
	o = append(o, 0xbe, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendInt64(o, z.HighestObservedPacketNumber)
	// string "ack_ranges"
	o = append(o, 0xaa, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AckRanges)))
	for za0004 := range z.AckRanges {
		o = msgp.AppendArrayHeader(o, uint32(2))
		for za0005 := range z.AckRanges[za0004] {
			o = msgp.AppendInt64(o, z.AckRanges[za0004][za0005])
		}
	}
	// string "remote_ack_ranges"
	o = append(o, 0xb1, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RemoteAckRanges)))
	for za0006 := range z.RemoteAckRanges {
		o = msgp.AppendArrayHeader(o, uint32(2))
		for za0007 := range z.RemoteAckRanges[za0006] {
			o = msgp.AppendInt64(o, z.RemoteAckRanges[za0006][za0007])
		}
	}
	// string "pending_acks"
	o = append(o, 0xac, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x6b, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PendingAcks)))
	for za0008 := range z.PendingAcks {
		o, err = z.PendingAcks[za0008].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "PendingAcks", za0008)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Transport) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "chosen_alpn":
			z.ChosenALPN, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChosenALPN")
				return
			}
		case "vantage_point":
			z.VantagePoint, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VantagePoint")
				return
			}
		case "connection_ids":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionIDs")
				return
			}
			if cap(z.ConnectionIDs) >= int(zb0002) {
				z.ConnectionIDs = (z.ConnectionIDs)[:zb0002]
			} else {
				z.ConnectionIDs = make([]ConnectionID, zb0002)
			}
			for za0001 := range z.ConnectionIDs {
				bts, err = z.ConnectionIDs[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConnectionIDs", za0001)
					return
				}
			}
		case "remote_connection_ids":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteConnectionIDs")
				return
			}
			if cap(z.RemoteConnectionIDs) >= int(zb0003) {
				z.RemoteConnectionIDs = (z.RemoteConnectionIDs)[:zb0003]
			} else {
				z.RemoteConnectionIDs = make([]ConnectionID, zb0003)
			}
			for za0002 := range z.RemoteConnectionIDs {
				bts, err = z.RemoteConnectionIDs[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RemoteConnectionIDs", za0002)
					return
				}
			}
		case "dst_ip":
			z.DestinationIP, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DestinationIP")
				return
			}
		case "dst_port":
			z.DestinationPort, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DestinationPort")
				return
			}
		case "parameters":
			bts, err = z.Parameters.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Parameters")
				return
			}
		case "remote_parameters":
			bts, err = z.RemoteParameters.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteParameters")
				return
			}
		case "idle_timeout":
			z.IdleTimeout, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IdleTimeout")
				return
			}
		case "max_data":
			z.MaxData, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxData")
				return
			}
		case "remote_max_data":
			z.RemoteMaxData, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteMaxData")
				return
			}
		case "sent_data":
			z.SentData, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SentData")
				return
			}
		case "received_data":
			z.ReceivedData, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReceivedData")
				return
			}
		case "max_bidirectional_streams":
			z.MaxBidirectionalStreams, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxBidirectionalStreams")
				return
			}
		case "max_unidirectional_streams":
			z.MaxUnidirectionalStreams, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxUnidirectionalStreams")
				return
			}
		case "remote_max_bidirectional_streams":
			z.RemoteMaxBidirectionalStreams, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteMaxBidirectionalStreams")
				return
			}
		case "remote_max_unidirectional_streams":
			z.RemoteMaxUnidirectionalStreams, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteMaxUnidirectionalStreams")
				return
			}
		case "next_unidirectional_stream":
			z.NextUnidirectionalStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextUnidirectionalStream")
				return
			}
		case "next_bidirectional_stream":
			z.NextBidirectionalStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextBidirectionalStream")
				return
			}
		case "remote_next_unidirectional_stream":
			z.RemoteNextUnidirectionalStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteNextUnidirectionalStream")
				return
			}
		case "remote_next_bidirectional_stream":
			z.RemoteNextBidirectionalStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteNextBidirectionalStream")
				return
			}
		case "streams":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Streams")
				return
			}
			if cap(z.Streams) >= int(zb0004) {
				z.Streams = (z.Streams)[:zb0004]
			} else {
				z.Streams = make([]Stream, zb0004)
			}
			for za0003 := range z.Streams {
				bts, err = z.Streams[za0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Streams", za0003)
					return
				}
			}
		case "next_packet_number":
			z.NextPacketNumber, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextPacketNumber")
				return
			}
		case "highest_observed_packet_number":
			z.HighestObservedPacketNumber, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HighestObservedPacketNumber")
				return
			}
		case "ack_ranges":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AckRanges")
				return
			}
			if cap(z.AckRanges) >= int(zb0005) {
				z.AckRanges = (z.AckRanges)[:zb0005]
			} else {
				z.AckRanges = make([][2]int64, zb0005)
			}
			for za0004 := range z.AckRanges {
				var zb0006 uint32
				zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AckRanges", za0004)
					return
				}
				if zb0006 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0006}
					return
				}
				for za0005 := range z.AckRanges[za0004] {
					z.AckRanges[za0004][za0005], bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "AckRanges", za0004, za0005)
						return
					}
				}
			}
		case "remote_ack_ranges":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteAckRanges")
				return
			}
			if cap(z.RemoteAckRanges) >= int(zb0007) {
				z.RemoteAckRanges = (z.RemoteAckRanges)[:zb0007]
			} else {
				z.RemoteAckRanges = make([][2]int64, zb0007)
			}
			for za0006 := range z.RemoteAckRanges {
				var zb0008 uint32
				zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RemoteAckRanges", za0006)
					return
				}
				if zb0008 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0008}
					return
				}
				for za0007 := range z.RemoteAckRanges[za0006] {
					z.RemoteAckRanges[za0006][za0007], bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "RemoteAckRanges", za0006, za0007)
						return
					}
				}
			}
		case "pending_acks":
			var zb0009 uint32
			zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PendingAcks")
				return
			}
			if cap(z.PendingAcks) >= int(zb0009) {
				z.PendingAcks = (z.PendingAcks)[:zb0009]
			} else {
				z.PendingAcks = make([]Packet, zb0009)
			}
			for za0008 := range z.PendingAcks {
				bts, err = z.PendingAcks[za0008].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PendingAcks", za0008)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Transport) Msgsize() (s int) {
	s = 3 + 8 + msgp.Uint32Size + 12 + msgp.StringPrefixSize + len(z.ChosenALPN) + 14 + msgp.StringPrefixSize + len(z.VantagePoint) + 15 + msgp.ArrayHeaderSize
	for za0001 := range z.ConnectionIDs {
		s += z.ConnectionIDs[za0001].Msgsize()
	}
	s += 22 + msgp.ArrayHeaderSize
	for za0002 := range z.RemoteConnectionIDs {
		s += z.RemoteConnectionIDs[za0002].Msgsize()
	}
	s += 7 + msgp.StringPrefixSize + len(z.DestinationIP) + 9 + msgp.Uint16Size + 11 + z.Parameters.Msgsize() + 18 + z.RemoteParameters.Msgsize() + 13 + msgp.Int64Size + 9 + msgp.Int64Size + 16 + msgp.Int64Size + 10 + msgp.Int64Size + 14 + msgp.Int64Size + 26 + msgp.Int64Size + 27 + msgp.Int64Size + 34 + msgp.Int64Size + 35 + msgp.Int64Size + 27 + msgp.Int64Size + 26 + msgp.Int64Size + 35 + msgp.Int64Size + 34 + msgp.Int64Size + 8 + msgp.ArrayHeaderSize
	for za0003 := range z.Streams {
		s += z.Streams[za0003].Msgsize()
	}
	s += 19 + msgp.Int64Size + 31 + msgp.Int64Size + 11 + msgp.ArrayHeaderSize + (len(z.AckRanges) * (2 * (msgp.Int64Size))) + 18 + msgp.ArrayHeaderSize + (len(z.RemoteAckRanges) * (2 * (msgp.Int64Size))) + 13 + msgp.ArrayHeaderSize
	for za0008 := range z.PendingAcks {
		s += z.PendingAcks[za0008].Msgsize()
	}
	return
}
