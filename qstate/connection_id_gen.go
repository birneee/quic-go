package qstate

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ConnectionID) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sequence_number":
			z.SequenceNumber, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "SequenceNumber")
				return
			}
		case "connection_id":
			err = z.ConnectionID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "stateless_reset_token":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "StatelessResetToken")
					return
				}
				z.StatelessResetToken = nil
			} else {
				if z.StatelessResetToken == nil {
					z.StatelessResetToken = new(StatelessResetToken)
				}
				err = z.StatelessResetToken.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "StatelessResetToken")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConnectionID) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "sequence_number"
	err = en.Append(0x83, 0xaf, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.SequenceNumber)
	if err != nil {
		err = msgp.WrapError(err, "SequenceNumber")
		return
	}
	// write "connection_id"
	err = en.Append(0xad, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = z.ConnectionID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ConnectionID")
		return
	}
	// write "stateless_reset_token"
	err = en.Append(0xb5, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	if z.StatelessResetToken == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.StatelessResetToken.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "StatelessResetToken")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConnectionID) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "sequence_number"
	o = append(o, 0x83, 0xaf, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendUint64(o, z.SequenceNumber)
	// string "connection_id"
	o = append(o, 0xad, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
	o, err = z.ConnectionID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ConnectionID")
		return
	}
	// string "stateless_reset_token"
	o = append(o, 0xb5, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	if z.StatelessResetToken == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.StatelessResetToken.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "StatelessResetToken")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConnectionID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sequence_number":
			z.SequenceNumber, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SequenceNumber")
				return
			}
		case "connection_id":
			bts, err = z.ConnectionID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "stateless_reset_token":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.StatelessResetToken = nil
			} else {
				if z.StatelessResetToken == nil {
					z.StatelessResetToken = new(StatelessResetToken)
				}
				bts, err = z.StatelessResetToken.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "StatelessResetToken")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConnectionID) Msgsize() (s int) {
	s = 1 + 16 + msgp.Uint64Size + 14 + z.ConnectionID.Msgsize() + 22
	if z.StatelessResetToken == nil {
		s += msgp.NilSize
	} else {
		s += z.StatelessResetToken.Msgsize()
	}
	return
}
