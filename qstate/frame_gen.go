package qstate

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Frame) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame_type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "stream_id":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "StreamID")
					return
				}
				z.StreamID = nil
			} else {
				if z.StreamID == nil {
					z.StreamID = new(int64)
				}
				*z.StreamID, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "StreamID")
					return
				}
			}
		case "offset":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Offset")
					return
				}
				z.Offset = nil
			} else {
				if z.Offset == nil {
					z.Offset = new(int64)
				}
				*z.Offset, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Offset")
					return
				}
			}
		case "length":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Length")
					return
				}
				z.Length = nil
			} else {
				if z.Length == nil {
					z.Length = new(int64)
				}
				*z.Length, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Length")
					return
				}
			}
		case "token":
			z.Token, err = dc.ReadBytes(z.Token)
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "sequence_number":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SequenceNumber")
					return
				}
				z.SequenceNumber = nil
			} else {
				if z.SequenceNumber == nil {
					z.SequenceNumber = new(uint64)
				}
				*z.SequenceNumber, err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "SequenceNumber")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Frame) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	_ = zb0001Mask
	if z.StreamID == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Offset == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Length == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Token == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Data == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.SequenceNumber == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "frame_type"
	err = en.Append(0xaa, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "stream_id"
		err = en.Append(0xa9, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		if z.StreamID == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.StreamID)
			if err != nil {
				err = msgp.WrapError(err, "StreamID")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "offset"
		err = en.Append(0xa6, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74)
		if err != nil {
			return
		}
		if z.Offset == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.Offset)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "length"
		err = en.Append(0xa6, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		if err != nil {
			return
		}
		if z.Length == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.Length)
			if err != nil {
				err = msgp.WrapError(err, "Length")
				return
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "token"
		err = en.Append(0xa5, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Token)
		if err != nil {
			err = msgp.WrapError(err, "Token")
			return
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "data"
		err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Data)
		if err != nil {
			err = msgp.WrapError(err, "Data")
			return
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "sequence_number"
		err = en.Append(0xaf, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
		if err != nil {
			return
		}
		if z.SequenceNumber == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteUint64(*z.SequenceNumber)
			if err != nil {
				err = msgp.WrapError(err, "SequenceNumber")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Frame) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	_ = zb0001Mask
	if z.StreamID == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Offset == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Length == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Token == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Data == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.SequenceNumber == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "frame_type"
	o = append(o, 0xaa, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "stream_id"
		o = append(o, 0xa9, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64)
		if z.StreamID == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.StreamID)
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "offset"
		o = append(o, 0xa6, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74)
		if z.Offset == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.Offset)
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "length"
		o = append(o, 0xa6, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
		if z.Length == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.Length)
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "token"
		o = append(o, 0xa5, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
		o = msgp.AppendBytes(o, z.Token)
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "data"
		o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
		o = msgp.AppendBytes(o, z.Data)
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "sequence_number"
		o = append(o, 0xaf, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
		if z.SequenceNumber == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendUint64(o, *z.SequenceNumber)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Frame) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame_type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "stream_id":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.StreamID = nil
			} else {
				if z.StreamID == nil {
					z.StreamID = new(int64)
				}
				*z.StreamID, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "StreamID")
					return
				}
			}
		case "offset":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Offset = nil
			} else {
				if z.Offset == nil {
					z.Offset = new(int64)
				}
				*z.Offset, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Offset")
					return
				}
			}
		case "length":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Length = nil
			} else {
				if z.Length == nil {
					z.Length = new(int64)
				}
				*z.Length, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Length")
					return
				}
			}
		case "token":
			z.Token, bts, err = msgp.ReadBytesBytes(bts, z.Token)
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "sequence_number":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SequenceNumber = nil
			} else {
				if z.SequenceNumber == nil {
					z.SequenceNumber = new(uint64)
				}
				*z.SequenceNumber, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SequenceNumber")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Frame) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.Type) + 10
	if z.StreamID == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.Offset == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 7
	if z.Length == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 6 + msgp.BytesPrefixSize + len(z.Token) + 5 + msgp.BytesPrefixSize + len(z.Data) + 16
	if z.SequenceNumber == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Uint64Size
	}
	return
}
