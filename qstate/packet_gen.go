package qstate

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Packet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "packet_number":
			z.PacketNumber, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "PacketNumber")
				return
			}
		case "frames":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Frames")
				return
			}
			if cap(z.Frames) >= int(zb0002) {
				z.Frames = (z.Frames)[:zb0002]
			} else {
				z.Frames = make([]Frame, zb0002)
			}
			for za0001 := range z.Frames {
				err = z.Frames[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Frames", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Packet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "packet_number"
	err = en.Append(0x82, 0xad, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.PacketNumber)
	if err != nil {
		err = msgp.WrapError(err, "PacketNumber")
		return
	}
	// write "frames"
	err = en.Append(0xa6, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Frames)))
	if err != nil {
		err = msgp.WrapError(err, "Frames")
		return
	}
	for za0001 := range z.Frames {
		err = z.Frames[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Frames", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Packet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "packet_number"
	o = append(o, 0x82, 0xad, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendInt64(o, z.PacketNumber)
	// string "frames"
	o = append(o, 0xa6, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Frames)))
	for za0001 := range z.Frames {
		o, err = z.Frames[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Frames", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Packet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "packet_number":
			z.PacketNumber, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PacketNumber")
				return
			}
		case "frames":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Frames")
				return
			}
			if cap(z.Frames) >= int(zb0002) {
				z.Frames = (z.Frames)[:zb0002]
			} else {
				z.Frames = make([]Frame, zb0002)
			}
			for za0001 := range z.Frames {
				bts, err = z.Frames[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Frames", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Packet) Msgsize() (s int) {
	s = 1 + 14 + msgp.Int64Size + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Frames {
		s += z.Frames[za0001].Msgsize()
	}
	return
}
