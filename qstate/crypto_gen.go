package qstate

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Crypto) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key_phase":
			z.KeyPhase, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "KeyPhase")
				return
			}
		case "tls_cipher":
			z.TlsCipher, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TlsCipher")
				return
			}
		case "remote_header_protection_key":
			z.RemoteHeaderProtectionKey, err = dc.ReadBytes(z.RemoteHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "RemoteHeaderProtectionKey")
				return
			}
		case "header_protection_key":
			z.HeaderProtectionKey, err = dc.ReadBytes(z.HeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "HeaderProtectionKey")
				return
			}
		case "remote_traffic_secret":
			z.RemoteTrafficSecret, err = dc.ReadBytes(z.RemoteTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "RemoteTrafficSecret")
				return
			}
		case "traffic_secret":
			z.TrafficSecret, err = dc.ReadBytes(z.TrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "TrafficSecret")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Crypto) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "key_phase"
	err = en.Append(0x86, 0xa9, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.KeyPhase)
	if err != nil {
		err = msgp.WrapError(err, "KeyPhase")
		return
	}
	// write "tls_cipher"
	err = en.Append(0xaa, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.TlsCipher)
	if err != nil {
		err = msgp.WrapError(err, "TlsCipher")
		return
	}
	// write "remote_header_protection_key"
	err = en.Append(0xbc, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.RemoteHeaderProtectionKey)
	if err != nil {
		err = msgp.WrapError(err, "RemoteHeaderProtectionKey")
		return
	}
	// write "header_protection_key"
	err = en.Append(0xb5, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.HeaderProtectionKey)
	if err != nil {
		err = msgp.WrapError(err, "HeaderProtectionKey")
		return
	}
	// write "remote_traffic_secret"
	err = en.Append(0xb5, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.RemoteTrafficSecret)
	if err != nil {
		err = msgp.WrapError(err, "RemoteTrafficSecret")
		return
	}
	// write "traffic_secret"
	err = en.Append(0xae, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.TrafficSecret)
	if err != nil {
		err = msgp.WrapError(err, "TrafficSecret")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Crypto) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "key_phase"
	o = append(o, 0x86, 0xa9, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65)
	o = msgp.AppendUint64(o, z.KeyPhase)
	// string "tls_cipher"
	o = append(o, 0xaa, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72)
	o = msgp.AppendString(o, z.TlsCipher)
	// string "remote_header_protection_key"
	o = append(o, 0xbc, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.RemoteHeaderProtectionKey)
	// string "header_protection_key"
	o = append(o, 0xb5, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.HeaderProtectionKey)
	// string "remote_traffic_secret"
	o = append(o, 0xb5, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendBytes(o, z.RemoteTrafficSecret)
	// string "traffic_secret"
	o = append(o, 0xae, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendBytes(o, z.TrafficSecret)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Crypto) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key_phase":
			z.KeyPhase, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "KeyPhase")
				return
			}
		case "tls_cipher":
			z.TlsCipher, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TlsCipher")
				return
			}
		case "remote_header_protection_key":
			z.RemoteHeaderProtectionKey, bts, err = msgp.ReadBytesBytes(bts, z.RemoteHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "RemoteHeaderProtectionKey")
				return
			}
		case "header_protection_key":
			z.HeaderProtectionKey, bts, err = msgp.ReadBytesBytes(bts, z.HeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "HeaderProtectionKey")
				return
			}
		case "remote_traffic_secret":
			z.RemoteTrafficSecret, bts, err = msgp.ReadBytesBytes(bts, z.RemoteTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "RemoteTrafficSecret")
				return
			}
		case "traffic_secret":
			z.TrafficSecret, bts, err = msgp.ReadBytesBytes(bts, z.TrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "TrafficSecret")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Crypto) Msgsize() (s int) {
	s = 1 + 10 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len(z.TlsCipher) + 29 + msgp.BytesPrefixSize + len(z.RemoteHeaderProtectionKey) + 22 + msgp.BytesPrefixSize + len(z.HeaderProtectionKey) + 22 + msgp.BytesPrefixSize + len(z.RemoteTrafficSecret) + 15 + msgp.BytesPrefixSize + len(z.TrafficSecret)
	return
}
