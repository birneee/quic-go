package qstate

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Metrics) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "congestion_window":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CongestionWindow")
					return
				}
				z.CongestionWindow = nil
			} else {
				if z.CongestionWindow == nil {
					z.CongestionWindow = new(int64)
				}
				*z.CongestionWindow, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "CongestionWindow")
					return
				}
			}
		case "smoothed_rtt":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SmoothedRTT")
					return
				}
				z.SmoothedRTT = nil
			} else {
				if z.SmoothedRTT == nil {
					z.SmoothedRTT = new(int64)
				}
				*z.SmoothedRTT, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "SmoothedRTT")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Metrics) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.CongestionWindow == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SmoothedRTT == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "congestion_window"
		err = en.Append(0xb1, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77)
		if err != nil {
			return
		}
		if z.CongestionWindow == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.CongestionWindow)
			if err != nil {
				err = msgp.WrapError(err, "CongestionWindow")
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "smoothed_rtt"
		err = en.Append(0xac, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x74, 0x74)
		if err != nil {
			return
		}
		if z.SmoothedRTT == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt64(*z.SmoothedRTT)
			if err != nil {
				err = msgp.WrapError(err, "SmoothedRTT")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Metrics) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.CongestionWindow == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SmoothedRTT == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "congestion_window"
		o = append(o, 0xb1, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77)
		if z.CongestionWindow == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.CongestionWindow)
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "smoothed_rtt"
		o = append(o, 0xac, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x74, 0x74)
		if z.SmoothedRTT == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt64(o, *z.SmoothedRTT)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Metrics) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "congestion_window":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CongestionWindow = nil
			} else {
				if z.CongestionWindow == nil {
					z.CongestionWindow = new(int64)
				}
				*z.CongestionWindow, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CongestionWindow")
					return
				}
			}
		case "smoothed_rtt":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SmoothedRTT = nil
			} else {
				if z.SmoothedRTT == nil {
					z.SmoothedRTT = new(int64)
				}
				*z.SmoothedRTT, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SmoothedRTT")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Metrics) Msgsize() (s int) {
	s = 1 + 18
	if z.CongestionWindow == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 13
	if z.SmoothedRTT == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	return
}
