package qstate

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Connection) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "state":
			err = z.State.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "transport":
			err = z.Transport.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Transport")
				return
			}
		case "crypto":
			err = z.Crypto.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Crypto")
				return
			}
		case "metrics":
			err = z.Metrics.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Metrics")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Connection) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "state"
	err = en.Append(0x84, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.State.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	// write "transport"
	err = en.Append(0xa9, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = z.Transport.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Transport")
		return
	}
	// write "crypto"
	err = en.Append(0xa6, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f)
	if err != nil {
		return
	}
	err = z.Crypto.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Crypto")
		return
	}
	// write "metrics"
	err = en.Append(0xa7, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73)
	if err != nil {
		return
	}
	err = z.Metrics.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Metrics")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Connection) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "state"
	o = append(o, 0x84, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	o, err = z.State.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	// string "transport"
	o = append(o, 0xa9, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74)
	o, err = z.Transport.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Transport")
		return
	}
	// string "crypto"
	o = append(o, 0xa6, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f)
	o, err = z.Crypto.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Crypto")
		return
	}
	// string "metrics"
	o = append(o, 0xa7, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73)
	o, err = z.Metrics.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Metrics")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Connection) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "state":
			bts, err = z.State.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "transport":
			bts, err = z.Transport.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transport")
				return
			}
		case "crypto":
			bts, err = z.Crypto.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Crypto")
				return
			}
		case "metrics":
			bts, err = z.Metrics.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Metrics")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Connection) Msgsize() (s int) {
	s = 1 + 6 + z.State.Msgsize() + 10 + z.Transport.Msgsize() + 7 + z.Crypto.Msgsize() + 8 + z.Metrics.Msgsize()
	return
}
