// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quic-go/quic-go/internal/xads (interfaces: SendStream)

// Package xads is a generated GoMock package.
package xads

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ackhandler "github.com/quic-go/quic-go/internal/ackhandler"
	protocol "github.com/quic-go/quic-go/internal/protocol"
	qerr "github.com/quic-go/quic-go/internal/qerr"
	wire "github.com/quic-go/quic-go/internal/wire"
)

// MockSendStream is a mock of SendStream interface.
type MockSendStream struct {
	ctrl     *gomock.Controller
	recorder *MockSendStreamMockRecorder
}

// MockSendStreamMockRecorder is the mock recorder for MockSendStream.
type MockSendStreamMockRecorder struct {
	mock *MockSendStream
}

// NewMockSendStream creates a new mock instance.
func NewMockSendStream(ctrl *gomock.Controller) *MockSendStream {
	mock := &MockSendStream{ctrl: ctrl}
	mock.recorder = &MockSendStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendStream) EXPECT() *MockSendStreamMockRecorder {
	return m.recorder
}

// CancelWrite mocks base method.
func (m *MockSendStream) CancelWrite(arg0 qerr.StreamErrorCode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelWrite", arg0)
}

// CancelWrite indicates an expected call of CancelWrite.
func (mr *MockSendStreamMockRecorder) CancelWrite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWrite", reflect.TypeOf((*MockSendStream)(nil).CancelWrite), arg0)
}

// Close mocks base method.
func (m *MockSendStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSendStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSendStream)(nil).Close))
}

// CloseForShutdown mocks base method.
func (m *MockSendStream) CloseForShutdown(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseForShutdown", arg0)
}

// CloseForShutdown indicates an expected call of CloseForShutdown.
func (mr *MockSendStreamMockRecorder) CloseForShutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseForShutdown", reflect.TypeOf((*MockSendStream)(nil).CloseForShutdown), arg0)
}

// Context mocks base method.
func (m *MockSendStream) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSendStreamMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSendStream)(nil).Context))
}

// HandleStopSendingFrame mocks base method.
func (m *MockSendStream) HandleStopSendingFrame(arg0 *wire.StopSendingFrame) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleStopSendingFrame", arg0)
}

// HandleStopSendingFrame indicates an expected call of HandleStopSendingFrame.
func (mr *MockSendStreamMockRecorder) HandleStopSendingFrame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStopSendingFrame", reflect.TypeOf((*MockSendStream)(nil).HandleStopSendingFrame), arg0)
}

// HasData mocks base method.
func (m *MockSendStream) HasData() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasData")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasData indicates an expected call of HasData.
func (mr *MockSendStreamMockRecorder) HasData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasData", reflect.TypeOf((*MockSendStream)(nil).HasData))
}

// PopStreamFrame mocks base method.
func (m *MockSendStream) PopStreamFrame(arg0 protocol.ByteCount, arg1 protocol.VersionNumber) (*ackhandler.Frame, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopStreamFrame", arg0, arg1)
	ret0, _ := ret[0].(*ackhandler.Frame)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// PopStreamFrame indicates an expected call of PopStreamFrame.
func (mr *MockSendStreamMockRecorder) PopStreamFrame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopStreamFrame", reflect.TypeOf((*MockSendStream)(nil).PopStreamFrame), arg0, arg1)
}

// SetWriteDeadline mocks base method.
func (m *MockSendStream) SetWriteDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockSendStreamMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockSendStream)(nil).SetWriteDeadline), arg0)
}

// StreamID mocks base method.
func (m *MockSendStream) StreamID() protocol.StreamID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(protocol.StreamID)
	return ret0
}

// StreamID indicates an expected call of StreamID.
func (mr *MockSendStreamMockRecorder) StreamID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockSendStream)(nil).StreamID))
}

// UpdateSendWindow mocks base method.
func (m *MockSendStream) UpdateSendWindow(arg0 protocol.ByteCount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSendWindow", arg0)
}

// UpdateSendWindow indicates an expected call of UpdateSendWindow.
func (mr *MockSendStreamMockRecorder) UpdateSendWindow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendWindow", reflect.TypeOf((*MockSendStream)(nil).UpdateSendWindow), arg0)
}

// Write mocks base method.
func (m *MockSendStream) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSendStreamMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSendStream)(nil).Write), arg0)
}
