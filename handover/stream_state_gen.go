package handover

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/quic-go/quic-go/internal/protocol"
	"github.com/tinylib/msgp/msgp"
)

var _ msgp.NonStrMapKey = new(protocol.ByteCount)

// DecodeMsg implements msgp.Decodable
func (z *UniStreamState) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Offset":
			err = z.Offset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "FinOffset":
			err = z.FinOffset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "FinOffset")
				return
			}
		case "PendingFrames":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PendingFrames")
				return
			}
			if z.PendingFrames == nil {
				z.PendingFrames = make(map[protocol.ByteCount][]byte, zb0002)
			} else if len(z.PendingFrames) > 0 {
				for key := range z.PendingFrames {
					delete(z.PendingFrames, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PendingFrames")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "PendingFrames", za0001)
					return
				}
				z.PendingFrames[*(new(protocol.ByteCount).MsgpFromStrMapKey(za0001)).(*protocol.ByteCount)] = za0002
			}
		case "MaxData":
			err = z.MaxData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "MaxData")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UniStreamState) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Offset"
	err = en.Append(0x84, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.Offset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	// write "FinOffset"
	err = en.Append(0xa9, 0x46, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.FinOffset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "FinOffset")
		return
	}
	// write "PendingFrames"
	err = en.Append(0xad, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.PendingFrames)))
	if err != nil {
		err = msgp.WrapError(err, "PendingFrames")
		return
	}
	for za0001, za0002 := range z.PendingFrames {
		err = en.WriteString(za0001.MsgpStrMapKey())
		if err != nil {
			err = msgp.WrapError(err, "PendingFrames")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "PendingFrames", za0001)
			return
		}
	}
	// write "MaxData"
	err = en.Append(0xa7, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.MaxData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "MaxData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UniStreamState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Offset"
	o = append(o, 0x84, 0xa6, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.Offset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Offset")
		return
	}
	// string "FinOffset"
	o = append(o, 0xa9, 0x46, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.FinOffset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "FinOffset")
		return
	}
	// string "PendingFrames"
	o = append(o, 0xad, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.PendingFrames)))
	for za0001, za0002 := range z.PendingFrames {
		o = msgp.AppendString(o, za0001.MsgpStrMapKey())
		o = msgp.AppendBytes(o, za0002)
	}
	// string "MaxData"
	o = append(o, 0xa7, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	o, err = z.MaxData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxData")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UniStreamState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Offset":
			bts, err = z.Offset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "FinOffset":
			bts, err = z.FinOffset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "FinOffset")
				return
			}
		case "PendingFrames":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PendingFrames")
				return
			}
			if z.PendingFrames == nil {
				z.PendingFrames = make(map[protocol.ByteCount][]byte, zb0002)
			} else if len(z.PendingFrames) > 0 {
				for key := range z.PendingFrames {
					delete(z.PendingFrames, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PendingFrames")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "PendingFrames", za0001)
					return
				}
				z.PendingFrames[*(new(protocol.ByteCount).MsgpFromStrMapKey(za0001)).(*protocol.ByteCount)] = za0002
			}
		case "MaxData":
			bts, err = z.MaxData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UniStreamState) Msgsize() (s int) {
	s = 1 + 7 + z.Offset.Msgsize() + 10 + z.FinOffset.Msgsize() + 14 + msgp.MapHeaderSize
	if z.PendingFrames != nil {
		for za0001, za0002 := range z.PendingFrames {
			_ = za0002
			s += msgp.StringPrefixSize + za0001.MsgpStrMapKeySize() + msgp.BytesPrefixSize + len(za0002)
		}
	}
	s += 8 + z.MaxData.Msgsize()
	return
}
