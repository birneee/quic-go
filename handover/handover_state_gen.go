package handover

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ConnectionIDSequenceNumber) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint64
		zb0001, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ConnectionIDSequenceNumber(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ConnectionIDSequenceNumber) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint64(uint64(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ConnectionIDSequenceNumber) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConnectionIDSequenceNumber) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint64
		zb0001, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ConnectionIDSequenceNumber(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ConnectionIDSequenceNumber) Msgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConnectionIDWithResetToken) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConnectionID":
			z.ConnectionID, err = dc.ReadBytes(z.ConnectionID)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "StatelessResetToken":
			z.StatelessResetToken, err = dc.ReadBytes(z.StatelessResetToken)
			if err != nil {
				err = msgp.WrapError(err, "StatelessResetToken")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConnectionIDWithResetToken) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ConnectionID"
	err = en.Append(0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ConnectionID)
	if err != nil {
		err = msgp.WrapError(err, "ConnectionID")
		return
	}
	// write "StatelessResetToken"
	err = en.Append(0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.StatelessResetToken)
	if err != nil {
		err = msgp.WrapError(err, "StatelessResetToken")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConnectionIDWithResetToken) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ConnectionID"
	o = append(o, 0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendBytes(o, z.ConnectionID)
	// string "StatelessResetToken"
	o = append(o, 0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendBytes(o, z.StatelessResetToken)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConnectionIDWithResetToken) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConnectionID":
			z.ConnectionID, bts, err = msgp.ReadBytesBytes(bts, z.ConnectionID)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "StatelessResetToken":
			z.StatelessResetToken, bts, err = msgp.ReadBytesBytes(bts, z.StatelessResetToken)
			if err != nil {
				err = msgp.WrapError(err, "StatelessResetToken")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConnectionIDWithResetToken) Msgsize() (s int) {
	s = 1 + 13 + msgp.BytesPrefixSize + len(z.ConnectionID) + 20 + msgp.BytesPrefixSize + len(z.StatelessResetToken)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *State) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			err = z.Version.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "KeyPhase":
			err = z.KeyPhase.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "KeyPhase")
				return
			}
		case "CipherSuiteId":
			z.CipherSuiteId, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "CipherSuiteId")
				return
			}
		case "ServerHeaderProtectionKey":
			z.ServerHeaderProtectionKey, err = dc.ReadBytes(z.ServerHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ServerHeaderProtectionKey")
				return
			}
		case "ClientHeaderProtectionKey":
			z.ClientHeaderProtectionKey, err = dc.ReadBytes(z.ClientHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ClientHeaderProtectionKey")
				return
			}
		case "ServerTrafficSecret":
			z.ServerTrafficSecret, err = dc.ReadBytes(z.ServerTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ServerTrafficSecret")
				return
			}
		case "ClientTrafficSecret":
			z.ClientTrafficSecret, err = dc.ReadBytes(z.ClientTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ClientTrafficSecret")
				return
			}
		case "ServerAddress":
			z.ServerAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ServerAddress")
				return
			}
		case "ClientAddress":
			z.ClientAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClientAddress")
				return
			}
		case "ClientTransportParameters":
			z.ClientTransportParameters, err = dc.ReadBytes(z.ClientTransportParameters)
			if err != nil {
				err = msgp.WrapError(err, "ClientTransportParameters")
				return
			}
		case "ServerTransportParameters":
			z.ServerTransportParameters, err = dc.ReadBytes(z.ServerTransportParameters)
			if err != nil {
				err = msgp.WrapError(err, "ServerTransportParameters")
				return
			}
		case "ClientHighestSentPacketNumber":
			err = z.ClientHighestSentPacketNumber.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
				return
			}
		case "ServerHighestSentPacketNumber":
			err = z.ServerHighestSentPacketNumber.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
				return
			}
		case "ClientNextUniStream":
			err = z.ClientNextUniStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextUniStream")
				return
			}
		case "ServerNextUniStream":
			err = z.ServerNextUniStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextUniStream")
				return
			}
		case "ClientNextBidiStream":
			err = z.ClientNextBidiStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextBidiStream")
				return
			}
		case "ServerNextBidiStream":
			err = z.ServerNextBidiStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextBidiStream")
				return
			}
		case "ClientDirectionMaxData":
			err = z.ClientDirectionMaxData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionMaxData")
				return
			}
		case "ServerDirectionMaxData":
			err = z.ServerDirectionMaxData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionMaxData")
				return
			}
		case "ServerDirectionBytes":
			err = z.ServerDirectionBytes.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionBytes")
				return
			}
		case "ClientDirectionBytes":
			err = z.ClientDirectionBytes.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionBytes")
				return
			}
		case "ClientCongestionWindow":
			err = z.ClientCongestionWindow.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientCongestionWindow")
				return
			}
		case "ServerCongestionWindow":
			err = z.ServerCongestionWindow.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerCongestionWindow")
				return
			}
		case "RTT":
			z.RTT, err = dc.ReadDuration()
			if err != nil {
				err = msgp.WrapError(err, "RTT")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *State) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 24
	// write "Version"
	err = en.Append(0xde, 0x0, 0x18, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Version.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "KeyPhase"
	err = en.Append(0xa8, 0x4b, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = z.KeyPhase.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "KeyPhase")
		return
	}
	// write "CipherSuiteId"
	err = en.Append(0xad, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.CipherSuiteId)
	if err != nil {
		err = msgp.WrapError(err, "CipherSuiteId")
		return
	}
	// write "ServerHeaderProtectionKey"
	err = en.Append(0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ServerHeaderProtectionKey)
	if err != nil {
		err = msgp.WrapError(err, "ServerHeaderProtectionKey")
		return
	}
	// write "ClientHeaderProtectionKey"
	err = en.Append(0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ClientHeaderProtectionKey)
	if err != nil {
		err = msgp.WrapError(err, "ClientHeaderProtectionKey")
		return
	}
	// write "ServerTrafficSecret"
	err = en.Append(0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ServerTrafficSecret)
	if err != nil {
		err = msgp.WrapError(err, "ServerTrafficSecret")
		return
	}
	// write "ClientTrafficSecret"
	err = en.Append(0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ClientTrafficSecret)
	if err != nil {
		err = msgp.WrapError(err, "ClientTrafficSecret")
		return
	}
	// write "ServerAddress"
	err = en.Append(0xad, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.ServerAddress)
	if err != nil {
		err = msgp.WrapError(err, "ServerAddress")
		return
	}
	// write "ClientAddress"
	err = en.Append(0xad, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClientAddress)
	if err != nil {
		err = msgp.WrapError(err, "ClientAddress")
		return
	}
	// write "ClientTransportParameters"
	err = en.Append(0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ClientTransportParameters)
	if err != nil {
		err = msgp.WrapError(err, "ClientTransportParameters")
		return
	}
	// write "ServerTransportParameters"
	err = en.Append(0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ServerTransportParameters)
	if err != nil {
		err = msgp.WrapError(err, "ServerTransportParameters")
		return
	}
	// write "ClientHighestSentPacketNumber"
	err = en.Append(0xbd, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.ClientHighestSentPacketNumber.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
		return
	}
	// write "ServerHighestSentPacketNumber"
	err = en.Append(0xbd, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.ServerHighestSentPacketNumber.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
		return
	}
	// write "ClientNextUniStream"
	err = en.Append(0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ClientNextUniStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextUniStream")
		return
	}
	// write "ServerNextUniStream"
	err = en.Append(0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ServerNextUniStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextUniStream")
		return
	}
	// write "ClientNextBidiStream"
	err = en.Append(0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ClientNextBidiStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextBidiStream")
		return
	}
	// write "ServerNextBidiStream"
	err = en.Append(0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ServerNextBidiStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextBidiStream")
		return
	}
	// write "ClientDirectionMaxData"
	err = en.Append(0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.ClientDirectionMaxData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionMaxData")
		return
	}
	// write "ServerDirectionMaxData"
	err = en.Append(0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.ServerDirectionMaxData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionMaxData")
		return
	}
	// write "ServerDirectionBytes"
	err = en.Append(0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = z.ServerDirectionBytes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionBytes")
		return
	}
	// write "ClientDirectionBytes"
	err = en.Append(0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = z.ClientDirectionBytes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionBytes")
		return
	}
	// write "ClientCongestionWindow"
	err = en.Append(0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	if err != nil {
		return
	}
	err = z.ClientCongestionWindow.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientCongestionWindow")
		return
	}
	// write "ServerCongestionWindow"
	err = en.Append(0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	if err != nil {
		return
	}
	err = z.ServerCongestionWindow.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerCongestionWindow")
		return
	}
	// write "RTT"
	err = en.Append(0xa3, 0x52, 0x54, 0x54)
	if err != nil {
		return
	}
	err = en.WriteDuration(z.RTT)
	if err != nil {
		err = msgp.WrapError(err, "RTT")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *State) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 24
	// string "Version"
	o = append(o, 0xde, 0x0, 0x18, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o, err = z.Version.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// string "KeyPhase"
	o = append(o, 0xa8, 0x4b, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65)
	o, err = z.KeyPhase.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "KeyPhase")
		return
	}
	// string "CipherSuiteId"
	o = append(o, 0xad, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64)
	o = msgp.AppendUint16(o, z.CipherSuiteId)
	// string "ServerHeaderProtectionKey"
	o = append(o, 0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.ServerHeaderProtectionKey)
	// string "ClientHeaderProtectionKey"
	o = append(o, 0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.ClientHeaderProtectionKey)
	// string "ServerTrafficSecret"
	o = append(o, 0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendBytes(o, z.ServerTrafficSecret)
	// string "ClientTrafficSecret"
	o = append(o, 0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendBytes(o, z.ClientTrafficSecret)
	// string "ServerAddress"
	o = append(o, 0xad, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.ServerAddress)
	// string "ClientAddress"
	o = append(o, 0xad, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.ClientAddress)
	// string "ClientTransportParameters"
	o = append(o, 0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendBytes(o, z.ClientTransportParameters)
	// string "ServerTransportParameters"
	o = append(o, 0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendBytes(o, z.ServerTransportParameters)
	// string "ClientHighestSentPacketNumber"
	o = append(o, 0xbd, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o, err = z.ClientHighestSentPacketNumber.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
		return
	}
	// string "ServerHighestSentPacketNumber"
	o = append(o, 0xbd, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o, err = z.ServerHighestSentPacketNumber.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
		return
	}
	// string "ClientNextUniStream"
	o = append(o, 0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ClientNextUniStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextUniStream")
		return
	}
	// string "ServerNextUniStream"
	o = append(o, 0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ServerNextUniStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextUniStream")
		return
	}
	// string "ClientNextBidiStream"
	o = append(o, 0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ClientNextBidiStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextBidiStream")
		return
	}
	// string "ServerNextBidiStream"
	o = append(o, 0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ServerNextBidiStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextBidiStream")
		return
	}
	// string "ClientDirectionMaxData"
	o = append(o, 0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	o, err = z.ClientDirectionMaxData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionMaxData")
		return
	}
	// string "ServerDirectionMaxData"
	o = append(o, 0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	o, err = z.ServerDirectionMaxData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionMaxData")
		return
	}
	// string "ServerDirectionBytes"
	o = append(o, 0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	o, err = z.ServerDirectionBytes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionBytes")
		return
	}
	// string "ClientDirectionBytes"
	o = append(o, 0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	o, err = z.ClientDirectionBytes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionBytes")
		return
	}
	// string "ClientCongestionWindow"
	o = append(o, 0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	o, err = z.ClientCongestionWindow.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientCongestionWindow")
		return
	}
	// string "ServerCongestionWindow"
	o = append(o, 0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	o, err = z.ServerCongestionWindow.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerCongestionWindow")
		return
	}
	// string "RTT"
	o = append(o, 0xa3, 0x52, 0x54, 0x54)
	o = msgp.AppendDuration(o, z.RTT)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *State) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			bts, err = z.Version.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "KeyPhase":
			bts, err = z.KeyPhase.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "KeyPhase")
				return
			}
		case "CipherSuiteId":
			z.CipherSuiteId, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CipherSuiteId")
				return
			}
		case "ServerHeaderProtectionKey":
			z.ServerHeaderProtectionKey, bts, err = msgp.ReadBytesBytes(bts, z.ServerHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ServerHeaderProtectionKey")
				return
			}
		case "ClientHeaderProtectionKey":
			z.ClientHeaderProtectionKey, bts, err = msgp.ReadBytesBytes(bts, z.ClientHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ClientHeaderProtectionKey")
				return
			}
		case "ServerTrafficSecret":
			z.ServerTrafficSecret, bts, err = msgp.ReadBytesBytes(bts, z.ServerTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ServerTrafficSecret")
				return
			}
		case "ClientTrafficSecret":
			z.ClientTrafficSecret, bts, err = msgp.ReadBytesBytes(bts, z.ClientTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ClientTrafficSecret")
				return
			}
		case "ServerAddress":
			z.ServerAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerAddress")
				return
			}
		case "ClientAddress":
			z.ClientAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientAddress")
				return
			}
		case "ClientTransportParameters":
			z.ClientTransportParameters, bts, err = msgp.ReadBytesBytes(bts, z.ClientTransportParameters)
			if err != nil {
				err = msgp.WrapError(err, "ClientTransportParameters")
				return
			}
		case "ServerTransportParameters":
			z.ServerTransportParameters, bts, err = msgp.ReadBytesBytes(bts, z.ServerTransportParameters)
			if err != nil {
				err = msgp.WrapError(err, "ServerTransportParameters")
				return
			}
		case "ClientHighestSentPacketNumber":
			bts, err = z.ClientHighestSentPacketNumber.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
				return
			}
		case "ServerHighestSentPacketNumber":
			bts, err = z.ServerHighestSentPacketNumber.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
				return
			}
		case "ClientNextUniStream":
			bts, err = z.ClientNextUniStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextUniStream")
				return
			}
		case "ServerNextUniStream":
			bts, err = z.ServerNextUniStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextUniStream")
				return
			}
		case "ClientNextBidiStream":
			bts, err = z.ClientNextBidiStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextBidiStream")
				return
			}
		case "ServerNextBidiStream":
			bts, err = z.ServerNextBidiStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextBidiStream")
				return
			}
		case "ClientDirectionMaxData":
			bts, err = z.ClientDirectionMaxData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionMaxData")
				return
			}
		case "ServerDirectionMaxData":
			bts, err = z.ServerDirectionMaxData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionMaxData")
				return
			}
		case "ServerDirectionBytes":
			bts, err = z.ServerDirectionBytes.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionBytes")
				return
			}
		case "ClientDirectionBytes":
			bts, err = z.ClientDirectionBytes.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionBytes")
				return
			}
		case "ClientCongestionWindow":
			bts, err = z.ClientCongestionWindow.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientCongestionWindow")
				return
			}
		case "ServerCongestionWindow":
			bts, err = z.ServerCongestionWindow.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerCongestionWindow")
				return
			}
		case "RTT":
			z.RTT, bts, err = msgp.ReadDurationBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RTT")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *State) Msgsize() (s int) {
	s = 3 + 8 + z.Version.Msgsize() + 9 + z.KeyPhase.Msgsize() + 14 + msgp.Uint16Size + 26 + msgp.BytesPrefixSize + len(z.ServerHeaderProtectionKey) + 26 + msgp.BytesPrefixSize + len(z.ClientHeaderProtectionKey) + 20 + msgp.BytesPrefixSize + len(z.ServerTrafficSecret) + 20 + msgp.BytesPrefixSize + len(z.ClientTrafficSecret) + 14 + msgp.StringPrefixSize + len(z.ServerAddress) + 14 + msgp.StringPrefixSize + len(z.ClientAddress) + 26 + msgp.BytesPrefixSize + len(z.ClientTransportParameters) + 26 + msgp.BytesPrefixSize + len(z.ServerTransportParameters) + 30 + z.ClientHighestSentPacketNumber.Msgsize() + 30 + z.ServerHighestSentPacketNumber.Msgsize() + 20 + z.ClientNextUniStream.Msgsize() + 20 + z.ServerNextUniStream.Msgsize() + 21 + z.ClientNextBidiStream.Msgsize() + 21 + z.ServerNextBidiStream.Msgsize() + 23 + z.ClientDirectionMaxData.Msgsize() + 23 + z.ServerDirectionMaxData.Msgsize() + 21 + z.ServerDirectionBytes.Msgsize() + 21 + z.ClientDirectionBytes.Msgsize() + 23 + z.ClientCongestionWindow.Msgsize() + 23 + z.ServerCongestionWindow.Msgsize() + 4 + msgp.DurationSize
	return
}
