package handover

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/quic-go/quic-go/internal/protocol"
	"github.com/tinylib/msgp/msgp"
)

var _ msgp.NonStrMapKey = new(ConnectionIDSequenceNumber)
var _ msgp.NonStrMapKey = new(protocol.StreamID)

// DecodeMsg implements msgp.Decodable
func (z *ConnectionIDSequenceNumber) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint64
		zb0001, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ConnectionIDSequenceNumber(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ConnectionIDSequenceNumber) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint64(uint64(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ConnectionIDSequenceNumber) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConnectionIDSequenceNumber) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint64
		zb0001, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ConnectionIDSequenceNumber(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ConnectionIDSequenceNumber) Msgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConnectionIDWithResetToken) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConnectionID":
			z.ConnectionID, err = dc.ReadBytes(z.ConnectionID)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "StatelessResetToken":
			z.StatelessResetToken, err = dc.ReadBytes(z.StatelessResetToken)
			if err != nil {
				err = msgp.WrapError(err, "StatelessResetToken")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConnectionIDWithResetToken) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ConnectionID"
	err = en.Append(0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ConnectionID)
	if err != nil {
		err = msgp.WrapError(err, "ConnectionID")
		return
	}
	// write "StatelessResetToken"
	err = en.Append(0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.StatelessResetToken)
	if err != nil {
		err = msgp.WrapError(err, "StatelessResetToken")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConnectionIDWithResetToken) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ConnectionID"
	o = append(o, 0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendBytes(o, z.ConnectionID)
	// string "StatelessResetToken"
	o = append(o, 0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendBytes(o, z.StatelessResetToken)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConnectionIDWithResetToken) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConnectionID":
			z.ConnectionID, bts, err = msgp.ReadBytesBytes(bts, z.ConnectionID)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "StatelessResetToken":
			z.StatelessResetToken, bts, err = msgp.ReadBytesBytes(bts, z.StatelessResetToken)
			if err != nil {
				err = msgp.WrapError(err, "StatelessResetToken")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConnectionIDWithResetToken) Msgsize() (s int) {
	s = 1 + 13 + msgp.BytesPrefixSize + len(z.ConnectionID) + 20 + msgp.BytesPrefixSize + len(z.StatelessResetToken)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *State) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ClientConnectionIDs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ClientConnectionIDs")
				return
			}
			if z.ClientConnectionIDs == nil {
				z.ClientConnectionIDs = make(map[ConnectionIDSequenceNumber]*ConnectionIDWithResetToken, zb0002)
			} else if len(z.ClientConnectionIDs) > 0 {
				for key := range z.ClientConnectionIDs {
					delete(z.ClientConnectionIDs, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *ConnectionIDWithResetToken
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ClientConnectionIDs")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "ClientConnectionIDs", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(ConnectionIDWithResetToken)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "ClientConnectionIDs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "ClientConnectionIDs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "ConnectionID":
							za0002.ConnectionID, err = dc.ReadBytes(za0002.ConnectionID)
							if err != nil {
								err = msgp.WrapError(err, "ClientConnectionIDs", za0001, "ConnectionID")
								return
							}
						case "StatelessResetToken":
							za0002.StatelessResetToken, err = dc.ReadBytes(za0002.StatelessResetToken)
							if err != nil {
								err = msgp.WrapError(err, "ClientConnectionIDs", za0001, "StatelessResetToken")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "ClientConnectionIDs", za0001)
								return
							}
						}
					}
				}
				z.ClientConnectionIDs[*(new(ConnectionIDSequenceNumber).MsgpFromStrMapKey(za0001)).(*ConnectionIDSequenceNumber)] = za0002
			}
		case "ServerConnectionIDs":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ServerConnectionIDs")
				return
			}
			if z.ServerConnectionIDs == nil {
				z.ServerConnectionIDs = make(map[ConnectionIDSequenceNumber]*ConnectionIDWithResetToken, zb0004)
			} else if len(z.ServerConnectionIDs) > 0 {
				for key := range z.ServerConnectionIDs {
					delete(z.ServerConnectionIDs, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0003 string
				var za0004 *ConnectionIDWithResetToken
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ServerConnectionIDs")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "ServerConnectionIDs", za0003)
						return
					}
					za0004 = nil
				} else {
					if za0004 == nil {
						za0004 = new(ConnectionIDWithResetToken)
					}
					var zb0005 uint32
					zb0005, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "ServerConnectionIDs", za0003)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "ServerConnectionIDs", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "ConnectionID":
							za0004.ConnectionID, err = dc.ReadBytes(za0004.ConnectionID)
							if err != nil {
								err = msgp.WrapError(err, "ServerConnectionIDs", za0003, "ConnectionID")
								return
							}
						case "StatelessResetToken":
							za0004.StatelessResetToken, err = dc.ReadBytes(za0004.StatelessResetToken)
							if err != nil {
								err = msgp.WrapError(err, "ServerConnectionIDs", za0003, "StatelessResetToken")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "ServerConnectionIDs", za0003)
								return
							}
						}
					}
				}
				z.ServerConnectionIDs[*(new(ConnectionIDSequenceNumber).MsgpFromStrMapKey(za0003)).(*ConnectionIDSequenceNumber)] = za0004
			}
		case "Version":
			err = z.Version.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "KeyPhase":
			err = z.KeyPhase.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "KeyPhase")
				return
			}
		case "CipherSuiteId":
			z.CipherSuiteId, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "CipherSuiteId")
				return
			}
		case "ServerHeaderProtectionKey":
			z.ServerHeaderProtectionKey, err = dc.ReadBytes(z.ServerHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ServerHeaderProtectionKey")
				return
			}
		case "ClientHeaderProtectionKey":
			z.ClientHeaderProtectionKey, err = dc.ReadBytes(z.ClientHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ClientHeaderProtectionKey")
				return
			}
		case "ServerTrafficSecret":
			z.ServerTrafficSecret, err = dc.ReadBytes(z.ServerTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ServerTrafficSecret")
				return
			}
		case "ClientTrafficSecret":
			z.ClientTrafficSecret, err = dc.ReadBytes(z.ClientTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ClientTrafficSecret")
				return
			}
		case "ServerAddress":
			z.ServerAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ServerAddress")
				return
			}
		case "ClientAddress":
			z.ClientAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClientAddress")
				return
			}
		case "ClientTransportParameters":
			err = z.ClientTransportParameters.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientTransportParameters")
				return
			}
		case "ServerTransportParameters":
			err = z.ServerTransportParameters.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerTransportParameters")
				return
			}
		case "ClientHighestSentPacketNumber":
			err = z.ClientHighestSentPacketNumber.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
				return
			}
		case "ServerHighestSentPacketNumber":
			err = z.ServerHighestSentPacketNumber.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
				return
			}
		case "UniStreams":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "UniStreams")
				return
			}
			if z.UniStreams == nil {
				z.UniStreams = make(map[protocol.StreamID]*UniStreamState, zb0006)
			} else if len(z.UniStreams) > 0 {
				for key := range z.UniStreams {
					delete(z.UniStreams, key)
				}
			}
			for zb0006 > 0 {
				zb0006--
				var za0005 string
				var za0006 *UniStreamState
				za0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "UniStreams")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "UniStreams", za0005)
						return
					}
					za0006 = nil
				} else {
					if za0006 == nil {
						za0006 = new(UniStreamState)
					}
					err = za0006.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "UniStreams", za0005)
						return
					}
				}
				z.UniStreams[*(new(protocol.StreamID).MsgpFromStrMapKey(za0005)).(*protocol.StreamID)] = za0006
			}
		case "BidiStreams":
			var zb0007 uint32
			zb0007, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "BidiStreams")
				return
			}
			if z.BidiStreams == nil {
				z.BidiStreams = make(map[protocol.StreamID]*BidiStreamState, zb0007)
			} else if len(z.BidiStreams) > 0 {
				for key := range z.BidiStreams {
					delete(z.BidiStreams, key)
				}
			}
			for zb0007 > 0 {
				zb0007--
				var za0007 string
				var za0008 *BidiStreamState
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "BidiStreams")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "BidiStreams", za0007)
						return
					}
					za0008 = nil
				} else {
					if za0008 == nil {
						za0008 = new(BidiStreamState)
					}
					err = za0008.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "BidiStreams", za0007)
						return
					}
				}
				z.BidiStreams[*(new(protocol.StreamID).MsgpFromStrMapKey(za0007)).(*protocol.StreamID)] = za0008
			}
		case "ClientNextUniStream":
			err = z.ClientNextUniStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextUniStream")
				return
			}
		case "ServerNextUniStream":
			err = z.ServerNextUniStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextUniStream")
				return
			}
		case "ClientNextBidiStream":
			err = z.ClientNextBidiStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextBidiStream")
				return
			}
		case "ServerNextBidiStream":
			err = z.ServerNextBidiStream.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextBidiStream")
				return
			}
		case "ClientDirectionMaxData":
			err = z.ClientDirectionMaxData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionMaxData")
				return
			}
		case "ServerDirectionMaxData":
			err = z.ServerDirectionMaxData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionMaxData")
				return
			}
		case "ServerDirectionBytes":
			err = z.ServerDirectionBytes.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionBytes")
				return
			}
		case "ClientDirectionBytes":
			err = z.ClientDirectionBytes.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionBytes")
				return
			}
		case "ClientCongestionWindow":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ClientCongestionWindow")
					return
				}
				z.ClientCongestionWindow = nil
			} else {
				if z.ClientCongestionWindow == nil {
					z.ClientCongestionWindow = new(int64)
				}
				*z.ClientCongestionWindow, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ClientCongestionWindow")
					return
				}
			}
		case "ServerCongestionWindow":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ServerCongestionWindow")
					return
				}
				z.ServerCongestionWindow = nil
			} else {
				if z.ServerCongestionWindow == nil {
					z.ServerCongestionWindow = new(int64)
				}
				*z.ServerCongestionWindow, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "ServerCongestionWindow")
					return
				}
			}
		case "RTT":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RTT")
					return
				}
				z.RTT = nil
			} else {
				if z.RTT == nil {
					z.RTT = new(int64)
				}
				*z.RTT, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "RTT")
					return
				}
			}
		case "MaxClientUniStream":
			z.MaxClientUniStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MaxClientUniStream")
				return
			}
		case "MaxServerUniStream":
			z.MaxServerUniStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MaxServerUniStream")
				return
			}
		case "MaxClientBidiStream":
			z.MaxClientBidiStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MaxClientBidiStream")
				return
			}
		case "MaxServerBidiStream":
			z.MaxServerBidiStream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MaxServerBidiStream")
				return
			}
		case "ALPN":
			z.ALPN, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ALPN")
				return
			}
		case "ClientReceivedRanges":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ClientReceivedRanges")
				return
			}
			if cap(z.ClientReceivedRanges) >= int(zb0008) {
				z.ClientReceivedRanges = (z.ClientReceivedRanges)[:zb0008]
			} else {
				z.ClientReceivedRanges = make([][2]int64, zb0008)
			}
			for za0009 := range z.ClientReceivedRanges {
				var zb0009 uint32
				zb0009, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "ClientReceivedRanges", za0009)
					return
				}
				if zb0009 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0009}
					return
				}
				for za0010 := range z.ClientReceivedRanges[za0009] {
					z.ClientReceivedRanges[za0009][za0010], err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "ClientReceivedRanges", za0009, za0010)
						return
					}
				}
			}
		case "ServerReceivedRanges":
			var zb0010 uint32
			zb0010, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ServerReceivedRanges")
				return
			}
			if cap(z.ServerReceivedRanges) >= int(zb0010) {
				z.ServerReceivedRanges = (z.ServerReceivedRanges)[:zb0010]
			} else {
				z.ServerReceivedRanges = make([][2]int64, zb0010)
			}
			for za0011 := range z.ServerReceivedRanges {
				var zb0011 uint32
				zb0011, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "ServerReceivedRanges", za0011)
					return
				}
				if zb0011 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0011}
					return
				}
				for za0012 := range z.ServerReceivedRanges[za0011] {
					z.ServerReceivedRanges[za0011][za0012], err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "ServerReceivedRanges", za0011, za0012)
						return
					}
				}
			}
		case "ClientAckPending":
			var zb0012 uint32
			zb0012, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ClientAckPending")
				return
			}
			if cap(z.ClientAckPending) >= int(zb0012) {
				z.ClientAckPending = (z.ClientAckPending)[:zb0012]
			} else {
				z.ClientAckPending = make([]PacketState, zb0012)
			}
			for za0013 := range z.ClientAckPending {
				err = z.ClientAckPending[za0013].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ClientAckPending", za0013)
					return
				}
			}
		case "ServerAckPending":
			var zb0013 uint32
			zb0013, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ServerAckPending")
				return
			}
			if cap(z.ServerAckPending) >= int(zb0013) {
				z.ServerAckPending = (z.ServerAckPending)[:zb0013]
			} else {
				z.ServerAckPending = make([]PacketState, zb0013)
			}
			for za0014 := range z.ServerAckPending {
				err = z.ServerAckPending[za0014].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ServerAckPending", za0014)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *State) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 37
	// write "ClientConnectionIDs"
	err = en.Append(0xde, 0x0, 0x25, 0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ClientConnectionIDs)))
	if err != nil {
		err = msgp.WrapError(err, "ClientConnectionIDs")
		return
	}
	for za0001, za0002 := range z.ClientConnectionIDs {
		err = en.WriteString(za0001.MsgpStrMapKey())
		if err != nil {
			err = msgp.WrapError(err, "ClientConnectionIDs")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "ConnectionID"
			err = en.Append(0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
			if err != nil {
				return
			}
			err = en.WriteBytes(za0002.ConnectionID)
			if err != nil {
				err = msgp.WrapError(err, "ClientConnectionIDs", za0001, "ConnectionID")
				return
			}
			// write "StatelessResetToken"
			err = en.Append(0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteBytes(za0002.StatelessResetToken)
			if err != nil {
				err = msgp.WrapError(err, "ClientConnectionIDs", za0001, "StatelessResetToken")
				return
			}
		}
	}
	// write "ServerConnectionIDs"
	err = en.Append(0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ServerConnectionIDs)))
	if err != nil {
		err = msgp.WrapError(err, "ServerConnectionIDs")
		return
	}
	for za0003, za0004 := range z.ServerConnectionIDs {
		err = en.WriteString(za0003.MsgpStrMapKey())
		if err != nil {
			err = msgp.WrapError(err, "ServerConnectionIDs")
			return
		}
		if za0004 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "ConnectionID"
			err = en.Append(0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
			if err != nil {
				return
			}
			err = en.WriteBytes(za0004.ConnectionID)
			if err != nil {
				err = msgp.WrapError(err, "ServerConnectionIDs", za0003, "ConnectionID")
				return
			}
			// write "StatelessResetToken"
			err = en.Append(0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
			if err != nil {
				return
			}
			err = en.WriteBytes(za0004.StatelessResetToken)
			if err != nil {
				err = msgp.WrapError(err, "ServerConnectionIDs", za0003, "StatelessResetToken")
				return
			}
		}
	}
	// write "Version"
	err = en.Append(0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Version.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "KeyPhase"
	err = en.Append(0xa8, 0x4b, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = z.KeyPhase.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "KeyPhase")
		return
	}
	// write "CipherSuiteId"
	err = en.Append(0xad, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.CipherSuiteId)
	if err != nil {
		err = msgp.WrapError(err, "CipherSuiteId")
		return
	}
	// write "ServerHeaderProtectionKey"
	err = en.Append(0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ServerHeaderProtectionKey)
	if err != nil {
		err = msgp.WrapError(err, "ServerHeaderProtectionKey")
		return
	}
	// write "ClientHeaderProtectionKey"
	err = en.Append(0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ClientHeaderProtectionKey)
	if err != nil {
		err = msgp.WrapError(err, "ClientHeaderProtectionKey")
		return
	}
	// write "ServerTrafficSecret"
	err = en.Append(0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ServerTrafficSecret)
	if err != nil {
		err = msgp.WrapError(err, "ServerTrafficSecret")
		return
	}
	// write "ClientTrafficSecret"
	err = en.Append(0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ClientTrafficSecret)
	if err != nil {
		err = msgp.WrapError(err, "ClientTrafficSecret")
		return
	}
	// write "ServerAddress"
	err = en.Append(0xad, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.ServerAddress)
	if err != nil {
		err = msgp.WrapError(err, "ServerAddress")
		return
	}
	// write "ClientAddress"
	err = en.Append(0xad, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClientAddress)
	if err != nil {
		err = msgp.WrapError(err, "ClientAddress")
		return
	}
	// write "ClientTransportParameters"
	err = en.Append(0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = z.ClientTransportParameters.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientTransportParameters")
		return
	}
	// write "ServerTransportParameters"
	err = en.Append(0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = z.ServerTransportParameters.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerTransportParameters")
		return
	}
	// write "ClientHighestSentPacketNumber"
	err = en.Append(0xbd, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.ClientHighestSentPacketNumber.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
		return
	}
	// write "ServerHighestSentPacketNumber"
	err = en.Append(0xbd, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.ServerHighestSentPacketNumber.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
		return
	}
	// write "UniStreams"
	err = en.Append(0xaa, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.UniStreams)))
	if err != nil {
		err = msgp.WrapError(err, "UniStreams")
		return
	}
	for za0005, za0006 := range z.UniStreams {
		err = en.WriteString(za0005.MsgpStrMapKey())
		if err != nil {
			err = msgp.WrapError(err, "UniStreams")
			return
		}
		if za0006 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0006.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "UniStreams", za0005)
				return
			}
		}
	}
	// write "BidiStreams"
	err = en.Append(0xab, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.BidiStreams)))
	if err != nil {
		err = msgp.WrapError(err, "BidiStreams")
		return
	}
	for za0007, za0008 := range z.BidiStreams {
		err = en.WriteString(za0007.MsgpStrMapKey())
		if err != nil {
			err = msgp.WrapError(err, "BidiStreams")
			return
		}
		if za0008 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0008.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "BidiStreams", za0007)
				return
			}
		}
	}
	// write "ClientNextUniStream"
	err = en.Append(0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ClientNextUniStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextUniStream")
		return
	}
	// write "ServerNextUniStream"
	err = en.Append(0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ServerNextUniStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextUniStream")
		return
	}
	// write "ClientNextBidiStream"
	err = en.Append(0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ClientNextBidiStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextBidiStream")
		return
	}
	// write "ServerNextBidiStream"
	err = en.Append(0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.ServerNextBidiStream.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextBidiStream")
		return
	}
	// write "ClientDirectionMaxData"
	err = en.Append(0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.ClientDirectionMaxData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionMaxData")
		return
	}
	// write "ServerDirectionMaxData"
	err = en.Append(0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.ServerDirectionMaxData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionMaxData")
		return
	}
	// write "ServerDirectionBytes"
	err = en.Append(0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = z.ServerDirectionBytes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionBytes")
		return
	}
	// write "ClientDirectionBytes"
	err = en.Append(0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = z.ClientDirectionBytes.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionBytes")
		return
	}
	// write "ClientCongestionWindow"
	err = en.Append(0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	if err != nil {
		return
	}
	if z.ClientCongestionWindow == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.ClientCongestionWindow)
		if err != nil {
			err = msgp.WrapError(err, "ClientCongestionWindow")
			return
		}
	}
	// write "ServerCongestionWindow"
	err = en.Append(0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	if err != nil {
		return
	}
	if z.ServerCongestionWindow == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.ServerCongestionWindow)
		if err != nil {
			err = msgp.WrapError(err, "ServerCongestionWindow")
			return
		}
	}
	// write "RTT"
	err = en.Append(0xa3, 0x52, 0x54, 0x54)
	if err != nil {
		return
	}
	if z.RTT == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.RTT)
		if err != nil {
			err = msgp.WrapError(err, "RTT")
			return
		}
	}
	// write "MaxClientUniStream"
	err = en.Append(0xb2, 0x4d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MaxClientUniStream)
	if err != nil {
		err = msgp.WrapError(err, "MaxClientUniStream")
		return
	}
	// write "MaxServerUniStream"
	err = en.Append(0xb2, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MaxServerUniStream)
	if err != nil {
		err = msgp.WrapError(err, "MaxServerUniStream")
		return
	}
	// write "MaxClientBidiStream"
	err = en.Append(0xb3, 0x4d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MaxClientBidiStream)
	if err != nil {
		err = msgp.WrapError(err, "MaxClientBidiStream")
		return
	}
	// write "MaxServerBidiStream"
	err = en.Append(0xb3, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MaxServerBidiStream)
	if err != nil {
		err = msgp.WrapError(err, "MaxServerBidiStream")
		return
	}
	// write "ALPN"
	err = en.Append(0xa4, 0x41, 0x4c, 0x50, 0x4e)
	if err != nil {
		return
	}
	err = en.WriteString(z.ALPN)
	if err != nil {
		err = msgp.WrapError(err, "ALPN")
		return
	}
	// write "ClientReceivedRanges"
	err = en.Append(0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ClientReceivedRanges)))
	if err != nil {
		err = msgp.WrapError(err, "ClientReceivedRanges")
		return
	}
	for za0009 := range z.ClientReceivedRanges {
		err = en.WriteArrayHeader(uint32(2))
		if err != nil {
			err = msgp.WrapError(err, "ClientReceivedRanges", za0009)
			return
		}
		for za0010 := range z.ClientReceivedRanges[za0009] {
			err = en.WriteInt64(z.ClientReceivedRanges[za0009][za0010])
			if err != nil {
				err = msgp.WrapError(err, "ClientReceivedRanges", za0009, za0010)
				return
			}
		}
	}
	// write "ServerReceivedRanges"
	err = en.Append(0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ServerReceivedRanges)))
	if err != nil {
		err = msgp.WrapError(err, "ServerReceivedRanges")
		return
	}
	for za0011 := range z.ServerReceivedRanges {
		err = en.WriteArrayHeader(uint32(2))
		if err != nil {
			err = msgp.WrapError(err, "ServerReceivedRanges", za0011)
			return
		}
		for za0012 := range z.ServerReceivedRanges[za0011] {
			err = en.WriteInt64(z.ServerReceivedRanges[za0011][za0012])
			if err != nil {
				err = msgp.WrapError(err, "ServerReceivedRanges", za0011, za0012)
				return
			}
		}
	}
	// write "ClientAckPending"
	err = en.Append(0xb0, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ClientAckPending)))
	if err != nil {
		err = msgp.WrapError(err, "ClientAckPending")
		return
	}
	for za0013 := range z.ClientAckPending {
		err = z.ClientAckPending[za0013].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ClientAckPending", za0013)
			return
		}
	}
	// write "ServerAckPending"
	err = en.Append(0xb0, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ServerAckPending)))
	if err != nil {
		err = msgp.WrapError(err, "ServerAckPending")
		return
	}
	for za0014 := range z.ServerAckPending {
		err = z.ServerAckPending[za0014].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ServerAckPending", za0014)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *State) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 37
	// string "ClientConnectionIDs"
	o = append(o, 0xde, 0x0, 0x25, 0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.ClientConnectionIDs)))
	for za0001, za0002 := range z.ClientConnectionIDs {
		o = msgp.AppendString(o, za0001.MsgpStrMapKey())
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "ConnectionID"
			o = append(o, 0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
			o = msgp.AppendBytes(o, za0002.ConnectionID)
			// string "StatelessResetToken"
			o = append(o, 0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
			o = msgp.AppendBytes(o, za0002.StatelessResetToken)
		}
	}
	// string "ServerConnectionIDs"
	o = append(o, 0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.ServerConnectionIDs)))
	for za0003, za0004 := range z.ServerConnectionIDs {
		o = msgp.AppendString(o, za0003.MsgpStrMapKey())
		if za0004 == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "ConnectionID"
			o = append(o, 0x82, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
			o = msgp.AppendBytes(o, za0004.ConnectionID)
			// string "StatelessResetToken"
			o = append(o, 0xb3, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
			o = msgp.AppendBytes(o, za0004.StatelessResetToken)
		}
	}
	// string "Version"
	o = append(o, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o, err = z.Version.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// string "KeyPhase"
	o = append(o, 0xa8, 0x4b, 0x65, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65)
	o, err = z.KeyPhase.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "KeyPhase")
		return
	}
	// string "CipherSuiteId"
	o = append(o, 0xad, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64)
	o = msgp.AppendUint16(o, z.CipherSuiteId)
	// string "ServerHeaderProtectionKey"
	o = append(o, 0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.ServerHeaderProtectionKey)
	// string "ClientHeaderProtectionKey"
	o = append(o, 0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.ClientHeaderProtectionKey)
	// string "ServerTrafficSecret"
	o = append(o, 0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendBytes(o, z.ServerTrafficSecret)
	// string "ClientTrafficSecret"
	o = append(o, 0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendBytes(o, z.ClientTrafficSecret)
	// string "ServerAddress"
	o = append(o, 0xad, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.ServerAddress)
	// string "ClientAddress"
	o = append(o, 0xad, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.ClientAddress)
	// string "ClientTransportParameters"
	o = append(o, 0xb9, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	o, err = z.ClientTransportParameters.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientTransportParameters")
		return
	}
	// string "ServerTransportParameters"
	o = append(o, 0xb9, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73)
	o, err = z.ServerTransportParameters.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerTransportParameters")
		return
	}
	// string "ClientHighestSentPacketNumber"
	o = append(o, 0xbd, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o, err = z.ClientHighestSentPacketNumber.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
		return
	}
	// string "ServerHighestSentPacketNumber"
	o = append(o, 0xbd, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o, err = z.ServerHighestSentPacketNumber.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
		return
	}
	// string "UniStreams"
	o = append(o, 0xaa, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.UniStreams)))
	for za0005, za0006 := range z.UniStreams {
		o = msgp.AppendString(o, za0005.MsgpStrMapKey())
		if za0006 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0006.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "UniStreams", za0005)
				return
			}
		}
	}
	// string "BidiStreams"
	o = append(o, 0xab, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.BidiStreams)))
	for za0007, za0008 := range z.BidiStreams {
		o = msgp.AppendString(o, za0007.MsgpStrMapKey())
		if za0008 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0008.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "BidiStreams", za0007)
				return
			}
		}
	}
	// string "ClientNextUniStream"
	o = append(o, 0xb3, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ClientNextUniStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextUniStream")
		return
	}
	// string "ServerNextUniStream"
	o = append(o, 0xb3, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ServerNextUniStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextUniStream")
		return
	}
	// string "ClientNextBidiStream"
	o = append(o, 0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ClientNextBidiStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientNextBidiStream")
		return
	}
	// string "ServerNextBidiStream"
	o = append(o, 0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o, err = z.ServerNextBidiStream.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerNextBidiStream")
		return
	}
	// string "ClientDirectionMaxData"
	o = append(o, 0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	o, err = z.ClientDirectionMaxData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionMaxData")
		return
	}
	// string "ServerDirectionMaxData"
	o = append(o, 0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	o, err = z.ServerDirectionMaxData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionMaxData")
		return
	}
	// string "ServerDirectionBytes"
	o = append(o, 0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	o, err = z.ServerDirectionBytes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionBytes")
		return
	}
	// string "ClientDirectionBytes"
	o = append(o, 0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73)
	o, err = z.ClientDirectionBytes.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionBytes")
		return
	}
	// string "ClientCongestionWindow"
	o = append(o, 0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	if z.ClientCongestionWindow == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.ClientCongestionWindow)
	}
	// string "ServerCongestionWindow"
	o = append(o, 0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	if z.ServerCongestionWindow == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.ServerCongestionWindow)
	}
	// string "RTT"
	o = append(o, 0xa3, 0x52, 0x54, 0x54)
	if z.RTT == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.RTT)
	}
	// string "MaxClientUniStream"
	o = append(o, 0xb2, 0x4d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.MaxClientUniStream)
	// string "MaxServerUniStream"
	o = append(o, 0xb2, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.MaxServerUniStream)
	// string "MaxClientBidiStream"
	o = append(o, 0xb3, 0x4d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.MaxClientBidiStream)
	// string "MaxServerBidiStream"
	o = append(o, 0xb3, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x69, 0x64, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.MaxServerBidiStream)
	// string "ALPN"
	o = append(o, 0xa4, 0x41, 0x4c, 0x50, 0x4e)
	o = msgp.AppendString(o, z.ALPN)
	// string "ClientReceivedRanges"
	o = append(o, 0xb4, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ClientReceivedRanges)))
	for za0009 := range z.ClientReceivedRanges {
		o = msgp.AppendArrayHeader(o, uint32(2))
		for za0010 := range z.ClientReceivedRanges[za0009] {
			o = msgp.AppendInt64(o, z.ClientReceivedRanges[za0009][za0010])
		}
	}
	// string "ServerReceivedRanges"
	o = append(o, 0xb4, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ServerReceivedRanges)))
	for za0011 := range z.ServerReceivedRanges {
		o = msgp.AppendArrayHeader(o, uint32(2))
		for za0012 := range z.ServerReceivedRanges[za0011] {
			o = msgp.AppendInt64(o, z.ServerReceivedRanges[za0011][za0012])
		}
	}
	// string "ClientAckPending"
	o = append(o, 0xb0, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ClientAckPending)))
	for za0013 := range z.ClientAckPending {
		o, err = z.ClientAckPending[za0013].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ClientAckPending", za0013)
			return
		}
	}
	// string "ServerAckPending"
	o = append(o, 0xb0, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ServerAckPending)))
	for za0014 := range z.ServerAckPending {
		o, err = z.ServerAckPending[za0014].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ServerAckPending", za0014)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *State) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ClientConnectionIDs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientConnectionIDs")
				return
			}
			if z.ClientConnectionIDs == nil {
				z.ClientConnectionIDs = make(map[ConnectionIDSequenceNumber]*ConnectionIDWithResetToken, zb0002)
			} else if len(z.ClientConnectionIDs) > 0 {
				for key := range z.ClientConnectionIDs {
					delete(z.ClientConnectionIDs, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *ConnectionIDWithResetToken
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClientConnectionIDs")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(ConnectionIDWithResetToken)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ClientConnectionIDs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "ClientConnectionIDs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "ConnectionID":
							za0002.ConnectionID, bts, err = msgp.ReadBytesBytes(bts, za0002.ConnectionID)
							if err != nil {
								err = msgp.WrapError(err, "ClientConnectionIDs", za0001, "ConnectionID")
								return
							}
						case "StatelessResetToken":
							za0002.StatelessResetToken, bts, err = msgp.ReadBytesBytes(bts, za0002.StatelessResetToken)
							if err != nil {
								err = msgp.WrapError(err, "ClientConnectionIDs", za0001, "StatelessResetToken")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "ClientConnectionIDs", za0001)
								return
							}
						}
					}
				}
				z.ClientConnectionIDs[*(new(ConnectionIDSequenceNumber).MsgpFromStrMapKey(za0001)).(*ConnectionIDSequenceNumber)] = za0002
			}
		case "ServerConnectionIDs":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerConnectionIDs")
				return
			}
			if z.ServerConnectionIDs == nil {
				z.ServerConnectionIDs = make(map[ConnectionIDSequenceNumber]*ConnectionIDWithResetToken, zb0004)
			} else if len(z.ServerConnectionIDs) > 0 {
				for key := range z.ServerConnectionIDs {
					delete(z.ServerConnectionIDs, key)
				}
			}
			for zb0004 > 0 {
				var za0003 string
				var za0004 *ConnectionIDWithResetToken
				zb0004--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ServerConnectionIDs")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0004 = nil
				} else {
					if za0004 == nil {
						za0004 = new(ConnectionIDWithResetToken)
					}
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ServerConnectionIDs", za0003)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "ServerConnectionIDs", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "ConnectionID":
							za0004.ConnectionID, bts, err = msgp.ReadBytesBytes(bts, za0004.ConnectionID)
							if err != nil {
								err = msgp.WrapError(err, "ServerConnectionIDs", za0003, "ConnectionID")
								return
							}
						case "StatelessResetToken":
							za0004.StatelessResetToken, bts, err = msgp.ReadBytesBytes(bts, za0004.StatelessResetToken)
							if err != nil {
								err = msgp.WrapError(err, "ServerConnectionIDs", za0003, "StatelessResetToken")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "ServerConnectionIDs", za0003)
								return
							}
						}
					}
				}
				z.ServerConnectionIDs[*(new(ConnectionIDSequenceNumber).MsgpFromStrMapKey(za0003)).(*ConnectionIDSequenceNumber)] = za0004
			}
		case "Version":
			bts, err = z.Version.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "KeyPhase":
			bts, err = z.KeyPhase.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "KeyPhase")
				return
			}
		case "CipherSuiteId":
			z.CipherSuiteId, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CipherSuiteId")
				return
			}
		case "ServerHeaderProtectionKey":
			z.ServerHeaderProtectionKey, bts, err = msgp.ReadBytesBytes(bts, z.ServerHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ServerHeaderProtectionKey")
				return
			}
		case "ClientHeaderProtectionKey":
			z.ClientHeaderProtectionKey, bts, err = msgp.ReadBytesBytes(bts, z.ClientHeaderProtectionKey)
			if err != nil {
				err = msgp.WrapError(err, "ClientHeaderProtectionKey")
				return
			}
		case "ServerTrafficSecret":
			z.ServerTrafficSecret, bts, err = msgp.ReadBytesBytes(bts, z.ServerTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ServerTrafficSecret")
				return
			}
		case "ClientTrafficSecret":
			z.ClientTrafficSecret, bts, err = msgp.ReadBytesBytes(bts, z.ClientTrafficSecret)
			if err != nil {
				err = msgp.WrapError(err, "ClientTrafficSecret")
				return
			}
		case "ServerAddress":
			z.ServerAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerAddress")
				return
			}
		case "ClientAddress":
			z.ClientAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientAddress")
				return
			}
		case "ClientTransportParameters":
			bts, err = z.ClientTransportParameters.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientTransportParameters")
				return
			}
		case "ServerTransportParameters":
			bts, err = z.ServerTransportParameters.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerTransportParameters")
				return
			}
		case "ClientHighestSentPacketNumber":
			bts, err = z.ClientHighestSentPacketNumber.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientHighestSentPacketNumber")
				return
			}
		case "ServerHighestSentPacketNumber":
			bts, err = z.ServerHighestSentPacketNumber.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerHighestSentPacketNumber")
				return
			}
		case "UniStreams":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UniStreams")
				return
			}
			if z.UniStreams == nil {
				z.UniStreams = make(map[protocol.StreamID]*UniStreamState, zb0006)
			} else if len(z.UniStreams) > 0 {
				for key := range z.UniStreams {
					delete(z.UniStreams, key)
				}
			}
			for zb0006 > 0 {
				var za0005 string
				var za0006 *UniStreamState
				zb0006--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UniStreams")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0006 = nil
				} else {
					if za0006 == nil {
						za0006 = new(UniStreamState)
					}
					bts, err = za0006.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "UniStreams", za0005)
						return
					}
				}
				z.UniStreams[*(new(protocol.StreamID).MsgpFromStrMapKey(za0005)).(*protocol.StreamID)] = za0006
			}
		case "BidiStreams":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BidiStreams")
				return
			}
			if z.BidiStreams == nil {
				z.BidiStreams = make(map[protocol.StreamID]*BidiStreamState, zb0007)
			} else if len(z.BidiStreams) > 0 {
				for key := range z.BidiStreams {
					delete(z.BidiStreams, key)
				}
			}
			for zb0007 > 0 {
				var za0007 string
				var za0008 *BidiStreamState
				zb0007--
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "BidiStreams")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0008 = nil
				} else {
					if za0008 == nil {
						za0008 = new(BidiStreamState)
					}
					bts, err = za0008.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "BidiStreams", za0007)
						return
					}
				}
				z.BidiStreams[*(new(protocol.StreamID).MsgpFromStrMapKey(za0007)).(*protocol.StreamID)] = za0008
			}
		case "ClientNextUniStream":
			bts, err = z.ClientNextUniStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextUniStream")
				return
			}
		case "ServerNextUniStream":
			bts, err = z.ServerNextUniStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextUniStream")
				return
			}
		case "ClientNextBidiStream":
			bts, err = z.ClientNextBidiStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientNextBidiStream")
				return
			}
		case "ServerNextBidiStream":
			bts, err = z.ServerNextBidiStream.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerNextBidiStream")
				return
			}
		case "ClientDirectionMaxData":
			bts, err = z.ClientDirectionMaxData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionMaxData")
				return
			}
		case "ServerDirectionMaxData":
			bts, err = z.ServerDirectionMaxData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionMaxData")
				return
			}
		case "ServerDirectionBytes":
			bts, err = z.ServerDirectionBytes.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionBytes")
				return
			}
		case "ClientDirectionBytes":
			bts, err = z.ClientDirectionBytes.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionBytes")
				return
			}
		case "ClientCongestionWindow":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ClientCongestionWindow = nil
			} else {
				if z.ClientCongestionWindow == nil {
					z.ClientCongestionWindow = new(int64)
				}
				*z.ClientCongestionWindow, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClientCongestionWindow")
					return
				}
			}
		case "ServerCongestionWindow":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ServerCongestionWindow = nil
			} else {
				if z.ServerCongestionWindow == nil {
					z.ServerCongestionWindow = new(int64)
				}
				*z.ServerCongestionWindow, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ServerCongestionWindow")
					return
				}
			}
		case "RTT":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RTT = nil
			} else {
				if z.RTT == nil {
					z.RTT = new(int64)
				}
				*z.RTT, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RTT")
					return
				}
			}
		case "MaxClientUniStream":
			z.MaxClientUniStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxClientUniStream")
				return
			}
		case "MaxServerUniStream":
			z.MaxServerUniStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxServerUniStream")
				return
			}
		case "MaxClientBidiStream":
			z.MaxClientBidiStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxClientBidiStream")
				return
			}
		case "MaxServerBidiStream":
			z.MaxServerBidiStream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxServerBidiStream")
				return
			}
		case "ALPN":
			z.ALPN, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ALPN")
				return
			}
		case "ClientReceivedRanges":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientReceivedRanges")
				return
			}
			if cap(z.ClientReceivedRanges) >= int(zb0008) {
				z.ClientReceivedRanges = (z.ClientReceivedRanges)[:zb0008]
			} else {
				z.ClientReceivedRanges = make([][2]int64, zb0008)
			}
			for za0009 := range z.ClientReceivedRanges {
				var zb0009 uint32
				zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClientReceivedRanges", za0009)
					return
				}
				if zb0009 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0009}
					return
				}
				for za0010 := range z.ClientReceivedRanges[za0009] {
					z.ClientReceivedRanges[za0009][za0010], bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ClientReceivedRanges", za0009, za0010)
						return
					}
				}
			}
		case "ServerReceivedRanges":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerReceivedRanges")
				return
			}
			if cap(z.ServerReceivedRanges) >= int(zb0010) {
				z.ServerReceivedRanges = (z.ServerReceivedRanges)[:zb0010]
			} else {
				z.ServerReceivedRanges = make([][2]int64, zb0010)
			}
			for za0011 := range z.ServerReceivedRanges {
				var zb0011 uint32
				zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ServerReceivedRanges", za0011)
					return
				}
				if zb0011 != uint32(2) {
					err = msgp.ArrayError{Wanted: uint32(2), Got: zb0011}
					return
				}
				for za0012 := range z.ServerReceivedRanges[za0011] {
					z.ServerReceivedRanges[za0011][za0012], bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ServerReceivedRanges", za0011, za0012)
						return
					}
				}
			}
		case "ClientAckPending":
			var zb0012 uint32
			zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientAckPending")
				return
			}
			if cap(z.ClientAckPending) >= int(zb0012) {
				z.ClientAckPending = (z.ClientAckPending)[:zb0012]
			} else {
				z.ClientAckPending = make([]PacketState, zb0012)
			}
			for za0013 := range z.ClientAckPending {
				bts, err = z.ClientAckPending[za0013].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClientAckPending", za0013)
					return
				}
			}
		case "ServerAckPending":
			var zb0013 uint32
			zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerAckPending")
				return
			}
			if cap(z.ServerAckPending) >= int(zb0013) {
				z.ServerAckPending = (z.ServerAckPending)[:zb0013]
			} else {
				z.ServerAckPending = make([]PacketState, zb0013)
			}
			for za0014 := range z.ServerAckPending {
				bts, err = z.ServerAckPending[za0014].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ServerAckPending", za0014)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *State) Msgsize() (s int) {
	s = 3 + 20 + msgp.MapHeaderSize
	if z.ClientConnectionIDs != nil {
		for za0001, za0002 := range z.ClientConnectionIDs {
			_ = za0002
			s += msgp.StringPrefixSize + za0001.MsgpStrMapKeySize()
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += 1 + 13 + msgp.BytesPrefixSize + len(za0002.ConnectionID) + 20 + msgp.BytesPrefixSize + len(za0002.StatelessResetToken)
			}
		}
	}
	s += 20 + msgp.MapHeaderSize
	if z.ServerConnectionIDs != nil {
		for za0003, za0004 := range z.ServerConnectionIDs {
			_ = za0004
			s += msgp.StringPrefixSize + za0003.MsgpStrMapKeySize()
			if za0004 == nil {
				s += msgp.NilSize
			} else {
				s += 1 + 13 + msgp.BytesPrefixSize + len(za0004.ConnectionID) + 20 + msgp.BytesPrefixSize + len(za0004.StatelessResetToken)
			}
		}
	}
	s += 8 + z.Version.Msgsize() + 9 + z.KeyPhase.Msgsize() + 14 + msgp.Uint16Size + 26 + msgp.BytesPrefixSize + len(z.ServerHeaderProtectionKey) + 26 + msgp.BytesPrefixSize + len(z.ClientHeaderProtectionKey) + 20 + msgp.BytesPrefixSize + len(z.ServerTrafficSecret) + 20 + msgp.BytesPrefixSize + len(z.ClientTrafficSecret) + 14 + msgp.StringPrefixSize + len(z.ServerAddress) + 14 + msgp.StringPrefixSize + len(z.ClientAddress) + 26 + z.ClientTransportParameters.Msgsize() + 26 + z.ServerTransportParameters.Msgsize() + 30 + z.ClientHighestSentPacketNumber.Msgsize() + 30 + z.ServerHighestSentPacketNumber.Msgsize() + 11 + msgp.MapHeaderSize
	if z.UniStreams != nil {
		for za0005, za0006 := range z.UniStreams {
			_ = za0006
			s += msgp.StringPrefixSize + za0005.MsgpStrMapKeySize()
			if za0006 == nil {
				s += msgp.NilSize
			} else {
				s += za0006.Msgsize()
			}
		}
	}
	s += 12 + msgp.MapHeaderSize
	if z.BidiStreams != nil {
		for za0007, za0008 := range z.BidiStreams {
			_ = za0008
			s += msgp.StringPrefixSize + za0007.MsgpStrMapKeySize()
			if za0008 == nil {
				s += msgp.NilSize
			} else {
				s += za0008.Msgsize()
			}
		}
	}
	s += 20 + z.ClientNextUniStream.Msgsize() + 20 + z.ServerNextUniStream.Msgsize() + 21 + z.ClientNextBidiStream.Msgsize() + 21 + z.ServerNextBidiStream.Msgsize() + 23 + z.ClientDirectionMaxData.Msgsize() + 23 + z.ServerDirectionMaxData.Msgsize() + 21 + z.ServerDirectionBytes.Msgsize() + 21 + z.ClientDirectionBytes.Msgsize() + 23
	if z.ClientCongestionWindow == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 23
	if z.ServerCongestionWindow == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 4
	if z.RTT == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 19 + msgp.Int64Size + 19 + msgp.Int64Size + 20 + msgp.Int64Size + 20 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.ALPN) + 21 + msgp.ArrayHeaderSize + (len(z.ClientReceivedRanges) * (2 * (msgp.Int64Size))) + 21 + msgp.ArrayHeaderSize + (len(z.ServerReceivedRanges) * (2 * (msgp.Int64Size))) + 17 + msgp.ArrayHeaderSize
	for za0013 := range z.ClientAckPending {
		s += z.ClientAckPending[za0013].Msgsize()
	}
	s += 17 + msgp.ArrayHeaderSize
	for za0014 := range z.ServerAckPending {
		s += z.ServerAckPending[za0014].Msgsize()
	}
	return
}
