package handover

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/quic-go/quic-go/internal/protocol"
	"github.com/tinylib/msgp/msgp"
)

var _ msgp.NonStrMapKey = new(protocol.ByteCount)

// DecodeMsg implements msgp.Decodable
func (z *BidiStreamState) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ClientDirectionOffset":
			err = z.ClientDirectionOffset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionOffset")
				return
			}
		case "ServerDirectionOffset":
			err = z.ServerDirectionOffset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionOffset")
				return
			}
		case "ServerDirectionAcknowledgedOffset":
			err = z.ServerDirectionAcknowledgedOffset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionAcknowledgedOffset")
				return
			}
		case "ClientDirectionAcknowledgedOffset":
			err = z.ClientDirectionAcknowledgedOffset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionAcknowledgedOffset")
				return
			}
		case "ClientDirectionFinOffset":
			err = z.ClientDirectionFinOffset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionFinOffset")
				return
			}
		case "ServerDirectionFinOffset":
			err = z.ServerDirectionFinOffset.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionFinOffset")
				return
			}
		case "ClientDirectionPendingFrames":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionPendingFrames")
				return
			}
			if z.ClientDirectionPendingFrames == nil {
				z.ClientDirectionPendingFrames = make(map[protocol.ByteCount][]byte, zb0002)
			} else if len(z.ClientDirectionPendingFrames) > 0 {
				for key := range z.ClientDirectionPendingFrames {
					delete(z.ClientDirectionPendingFrames, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ClientDirectionPendingFrames")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "ClientDirectionPendingFrames", za0001)
					return
				}
				z.ClientDirectionPendingFrames[*(new(protocol.ByteCount).MsgpFromStrMapKey(za0001)).(*protocol.ByteCount)] = za0002
			}
		case "ServerDirectionPendingFrames":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionPendingFrames")
				return
			}
			if z.ServerDirectionPendingFrames == nil {
				z.ServerDirectionPendingFrames = make(map[protocol.ByteCount][]byte, zb0003)
			} else if len(z.ServerDirectionPendingFrames) > 0 {
				for key := range z.ServerDirectionPendingFrames {
					delete(z.ServerDirectionPendingFrames, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 []byte
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ServerDirectionPendingFrames")
					return
				}
				za0004, err = dc.ReadBytes(za0004)
				if err != nil {
					err = msgp.WrapError(err, "ServerDirectionPendingFrames", za0003)
					return
				}
				z.ServerDirectionPendingFrames[*(new(protocol.ByteCount).MsgpFromStrMapKey(za0003)).(*protocol.ByteCount)] = za0004
			}
		case "ClientDirectionMaxData":
			err = z.ClientDirectionMaxData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionMaxData")
				return
			}
		case "ServerDirectionMaxData":
			err = z.ServerDirectionMaxData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionMaxData")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BidiStreamState) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "ClientDirectionOffset"
	err = en.Append(0x8a, 0xb5, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.ClientDirectionOffset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionOffset")
		return
	}
	// write "ServerDirectionOffset"
	err = en.Append(0xb5, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.ServerDirectionOffset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionOffset")
		return
	}
	// write "ServerDirectionAcknowledgedOffset"
	err = en.Append(0xd9, 0x21, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.ServerDirectionAcknowledgedOffset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionAcknowledgedOffset")
		return
	}
	// write "ClientDirectionAcknowledgedOffset"
	err = en.Append(0xd9, 0x21, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.ClientDirectionAcknowledgedOffset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionAcknowledgedOffset")
		return
	}
	// write "ClientDirectionFinOffset"
	err = en.Append(0xb8, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.ClientDirectionFinOffset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionFinOffset")
		return
	}
	// write "ServerDirectionFinOffset"
	err = en.Append(0xb8, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	if err != nil {
		return
	}
	err = z.ServerDirectionFinOffset.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionFinOffset")
		return
	}
	// write "ClientDirectionPendingFrames"
	err = en.Append(0xbc, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ClientDirectionPendingFrames)))
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionPendingFrames")
		return
	}
	for za0001, za0002 := range z.ClientDirectionPendingFrames {
		err = en.WriteString(za0001.MsgpStrMapKey())
		if err != nil {
			err = msgp.WrapError(err, "ClientDirectionPendingFrames")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "ClientDirectionPendingFrames", za0001)
			return
		}
	}
	// write "ServerDirectionPendingFrames"
	err = en.Append(0xbc, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ServerDirectionPendingFrames)))
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionPendingFrames")
		return
	}
	for za0003, za0004 := range z.ServerDirectionPendingFrames {
		err = en.WriteString(za0003.MsgpStrMapKey())
		if err != nil {
			err = msgp.WrapError(err, "ServerDirectionPendingFrames")
			return
		}
		err = en.WriteBytes(za0004)
		if err != nil {
			err = msgp.WrapError(err, "ServerDirectionPendingFrames", za0003)
			return
		}
	}
	// write "ClientDirectionMaxData"
	err = en.Append(0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.ClientDirectionMaxData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionMaxData")
		return
	}
	// write "ServerDirectionMaxData"
	err = en.Append(0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.ServerDirectionMaxData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionMaxData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BidiStreamState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "ClientDirectionOffset"
	o = append(o, 0x8a, 0xb5, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.ClientDirectionOffset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionOffset")
		return
	}
	// string "ServerDirectionOffset"
	o = append(o, 0xb5, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.ServerDirectionOffset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionOffset")
		return
	}
	// string "ServerDirectionAcknowledgedOffset"
	o = append(o, 0xd9, 0x21, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.ServerDirectionAcknowledgedOffset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionAcknowledgedOffset")
		return
	}
	// string "ClientDirectionAcknowledgedOffset"
	o = append(o, 0xd9, 0x21, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.ClientDirectionAcknowledgedOffset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionAcknowledgedOffset")
		return
	}
	// string "ClientDirectionFinOffset"
	o = append(o, 0xb8, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.ClientDirectionFinOffset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionFinOffset")
		return
	}
	// string "ServerDirectionFinOffset"
	o = append(o, 0xb8, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74)
	o, err = z.ServerDirectionFinOffset.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionFinOffset")
		return
	}
	// string "ClientDirectionPendingFrames"
	o = append(o, 0xbc, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.ClientDirectionPendingFrames)))
	for za0001, za0002 := range z.ClientDirectionPendingFrames {
		o = msgp.AppendString(o, za0001.MsgpStrMapKey())
		o = msgp.AppendBytes(o, za0002)
	}
	// string "ServerDirectionPendingFrames"
	o = append(o, 0xbc, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.ServerDirectionPendingFrames)))
	for za0003, za0004 := range z.ServerDirectionPendingFrames {
		o = msgp.AppendString(o, za0003.MsgpStrMapKey())
		o = msgp.AppendBytes(o, za0004)
	}
	// string "ClientDirectionMaxData"
	o = append(o, 0xb6, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	o, err = z.ClientDirectionMaxData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ClientDirectionMaxData")
		return
	}
	// string "ServerDirectionMaxData"
	o = append(o, 0xb6, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61)
	o, err = z.ServerDirectionMaxData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ServerDirectionMaxData")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BidiStreamState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ClientDirectionOffset":
			bts, err = z.ClientDirectionOffset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionOffset")
				return
			}
		case "ServerDirectionOffset":
			bts, err = z.ServerDirectionOffset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionOffset")
				return
			}
		case "ServerDirectionAcknowledgedOffset":
			bts, err = z.ServerDirectionAcknowledgedOffset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionAcknowledgedOffset")
				return
			}
		case "ClientDirectionAcknowledgedOffset":
			bts, err = z.ClientDirectionAcknowledgedOffset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionAcknowledgedOffset")
				return
			}
		case "ClientDirectionFinOffset":
			bts, err = z.ClientDirectionFinOffset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionFinOffset")
				return
			}
		case "ServerDirectionFinOffset":
			bts, err = z.ServerDirectionFinOffset.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionFinOffset")
				return
			}
		case "ClientDirectionPendingFrames":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionPendingFrames")
				return
			}
			if z.ClientDirectionPendingFrames == nil {
				z.ClientDirectionPendingFrames = make(map[protocol.ByteCount][]byte, zb0002)
			} else if len(z.ClientDirectionPendingFrames) > 0 {
				for key := range z.ClientDirectionPendingFrames {
					delete(z.ClientDirectionPendingFrames, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ClientDirectionPendingFrames")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "ClientDirectionPendingFrames", za0001)
					return
				}
				z.ClientDirectionPendingFrames[*(new(protocol.ByteCount).MsgpFromStrMapKey(za0001)).(*protocol.ByteCount)] = za0002
			}
		case "ServerDirectionPendingFrames":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionPendingFrames")
				return
			}
			if z.ServerDirectionPendingFrames == nil {
				z.ServerDirectionPendingFrames = make(map[protocol.ByteCount][]byte, zb0003)
			} else if len(z.ServerDirectionPendingFrames) > 0 {
				for key := range z.ServerDirectionPendingFrames {
					delete(z.ServerDirectionPendingFrames, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 []byte
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ServerDirectionPendingFrames")
					return
				}
				za0004, bts, err = msgp.ReadBytesBytes(bts, za0004)
				if err != nil {
					err = msgp.WrapError(err, "ServerDirectionPendingFrames", za0003)
					return
				}
				z.ServerDirectionPendingFrames[*(new(protocol.ByteCount).MsgpFromStrMapKey(za0003)).(*protocol.ByteCount)] = za0004
			}
		case "ClientDirectionMaxData":
			bts, err = z.ClientDirectionMaxData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientDirectionMaxData")
				return
			}
		case "ServerDirectionMaxData":
			bts, err = z.ServerDirectionMaxData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServerDirectionMaxData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BidiStreamState) Msgsize() (s int) {
	s = 1 + 22 + z.ClientDirectionOffset.Msgsize() + 22 + z.ServerDirectionOffset.Msgsize() + 35 + z.ServerDirectionAcknowledgedOffset.Msgsize() + 35 + z.ClientDirectionAcknowledgedOffset.Msgsize() + 25 + z.ClientDirectionFinOffset.Msgsize() + 25 + z.ServerDirectionFinOffset.Msgsize() + 29 + msgp.MapHeaderSize
	if z.ClientDirectionPendingFrames != nil {
		for za0001, za0002 := range z.ClientDirectionPendingFrames {
			_ = za0002
			s += msgp.StringPrefixSize + za0001.MsgpStrMapKeySize() + msgp.BytesPrefixSize + len(za0002)
		}
	}
	s += 29 + msgp.MapHeaderSize
	if z.ServerDirectionPendingFrames != nil {
		for za0003, za0004 := range z.ServerDirectionPendingFrames {
			_ = za0004
			s += msgp.StringPrefixSize + za0003.MsgpStrMapKeySize() + msgp.BytesPrefixSize + len(za0004)
		}
	}
	s += 23 + z.ClientDirectionMaxData.Msgsize() + 23 + z.ServerDirectionMaxData.Msgsize()
	return
}
