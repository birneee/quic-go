package handover

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TransportParameters) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "InitialMaxStreamDataBidiLocal":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataBidiLocal")
					return
				}
				z.InitialMaxStreamDataBidiLocal = nil
			} else {
				if z.InitialMaxStreamDataBidiLocal == nil {
					z.InitialMaxStreamDataBidiLocal = new(int64)
				}
				*z.InitialMaxStreamDataBidiLocal, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataBidiLocal")
					return
				}
			}
		case "InitialMaxStreamDataBidiRemote":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataBidiRemote")
					return
				}
				z.InitialMaxStreamDataBidiRemote = nil
			} else {
				if z.InitialMaxStreamDataBidiRemote == nil {
					z.InitialMaxStreamDataBidiRemote = new(int64)
				}
				*z.InitialMaxStreamDataBidiRemote, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataBidiRemote")
					return
				}
			}
		case "InitialMaxStreamDataUni":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataUni")
					return
				}
				z.InitialMaxStreamDataUni = nil
			} else {
				if z.InitialMaxStreamDataUni == nil {
					z.InitialMaxStreamDataUni = new(int64)
				}
				*z.InitialMaxStreamDataUni, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataUni")
					return
				}
			}
		case "MaxAckDelay":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MaxAckDelay")
					return
				}
				z.MaxAckDelay = nil
			} else {
				if z.MaxAckDelay == nil {
					z.MaxAckDelay = new(int64)
				}
				*z.MaxAckDelay, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "MaxAckDelay")
					return
				}
			}
		case "AckDelayExponent":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AckDelayExponent")
					return
				}
				z.AckDelayExponent = nil
			} else {
				if z.AckDelayExponent == nil {
					z.AckDelayExponent = new(uint8)
				}
				*z.AckDelayExponent, err = dc.ReadUint8()
				if err != nil {
					err = msgp.WrapError(err, "AckDelayExponent")
					return
				}
			}
		case "DisableActiveMigration":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DisableActiveMigration")
					return
				}
				z.DisableActiveMigration = nil
			} else {
				if z.DisableActiveMigration == nil {
					z.DisableActiveMigration = new(bool)
				}
				*z.DisableActiveMigration, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "DisableActiveMigration")
					return
				}
			}
		case "MaxUDPPayloadSize":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MaxUDPPayloadSize")
					return
				}
				z.MaxUDPPayloadSize = nil
			} else {
				if z.MaxUDPPayloadSize == nil {
					z.MaxUDPPayloadSize = new(int64)
				}
				*z.MaxUDPPayloadSize, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "MaxUDPPayloadSize")
					return
				}
			}
		case "MaxIdleTimeout":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MaxIdleTimeout")
					return
				}
				z.MaxIdleTimeout = nil
			} else {
				if z.MaxIdleTimeout == nil {
					z.MaxIdleTimeout = new(int64)
				}
				*z.MaxIdleTimeout, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "MaxIdleTimeout")
					return
				}
			}
		case "OriginalDestinationConnectionID":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "OriginalDestinationConnectionID")
					return
				}
				z.OriginalDestinationConnectionID = nil
			} else {
				if z.OriginalDestinationConnectionID == nil {
					z.OriginalDestinationConnectionID = new([]byte)
				}
				*z.OriginalDestinationConnectionID, err = dc.ReadBytes(*z.OriginalDestinationConnectionID)
				if err != nil {
					err = msgp.WrapError(err, "OriginalDestinationConnectionID")
					return
				}
			}
		case "ActiveConnectionIDLimit":
			z.ActiveConnectionIDLimit, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ActiveConnectionIDLimit")
				return
			}
		case "MaxDatagramFrameSize":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MaxDatagramFrameSize")
					return
				}
				z.MaxDatagramFrameSize = nil
			} else {
				if z.MaxDatagramFrameSize == nil {
					z.MaxDatagramFrameSize = new(int64)
				}
				*z.MaxDatagramFrameSize, err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "MaxDatagramFrameSize")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransportParameters) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "InitialMaxStreamDataBidiLocal"
	err = en.Append(0x8b, 0xbd, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x64, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x6c)
	if err != nil {
		return
	}
	if z.InitialMaxStreamDataBidiLocal == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.InitialMaxStreamDataBidiLocal)
		if err != nil {
			err = msgp.WrapError(err, "InitialMaxStreamDataBidiLocal")
			return
		}
	}
	// write "InitialMaxStreamDataBidiRemote"
	err = en.Append(0xbe, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x64, 0x69, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65)
	if err != nil {
		return
	}
	if z.InitialMaxStreamDataBidiRemote == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.InitialMaxStreamDataBidiRemote)
		if err != nil {
			err = msgp.WrapError(err, "InitialMaxStreamDataBidiRemote")
			return
		}
	}
	// write "InitialMaxStreamDataUni"
	err = en.Append(0xb7, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69)
	if err != nil {
		return
	}
	if z.InitialMaxStreamDataUni == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.InitialMaxStreamDataUni)
		if err != nil {
			err = msgp.WrapError(err, "InitialMaxStreamDataUni")
			return
		}
	}
	// write "MaxAckDelay"
	err = en.Append(0xab, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79)
	if err != nil {
		return
	}
	if z.MaxAckDelay == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.MaxAckDelay)
		if err != nil {
			err = msgp.WrapError(err, "MaxAckDelay")
			return
		}
	}
	// write "AckDelayExponent"
	err = en.Append(0xb0, 0x41, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	if z.AckDelayExponent == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteUint8(*z.AckDelayExponent)
		if err != nil {
			err = msgp.WrapError(err, "AckDelayExponent")
			return
		}
	}
	// write "DisableActiveMigration"
	err = en.Append(0xb6, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	if z.DisableActiveMigration == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBool(*z.DisableActiveMigration)
		if err != nil {
			err = msgp.WrapError(err, "DisableActiveMigration")
			return
		}
	}
	// write "MaxUDPPayloadSize"
	err = en.Append(0xb1, 0x4d, 0x61, 0x78, 0x55, 0x44, 0x50, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	if z.MaxUDPPayloadSize == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.MaxUDPPayloadSize)
		if err != nil {
			err = msgp.WrapError(err, "MaxUDPPayloadSize")
			return
		}
	}
	// write "MaxIdleTimeout"
	err = en.Append(0xae, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	if err != nil {
		return
	}
	if z.MaxIdleTimeout == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.MaxIdleTimeout)
		if err != nil {
			err = msgp.WrapError(err, "MaxIdleTimeout")
			return
		}
	}
	// write "OriginalDestinationConnectionID"
	err = en.Append(0xbf, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	if z.OriginalDestinationConnectionID == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(*z.OriginalDestinationConnectionID)
		if err != nil {
			err = msgp.WrapError(err, "OriginalDestinationConnectionID")
			return
		}
	}
	// write "ActiveConnectionIDLimit"
	err = en.Append(0xb7, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ActiveConnectionIDLimit)
	if err != nil {
		err = msgp.WrapError(err, "ActiveConnectionIDLimit")
		return
	}
	// write "MaxDatagramFrameSize"
	err = en.Append(0xb4, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	if z.MaxDatagramFrameSize == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteInt64(*z.MaxDatagramFrameSize)
		if err != nil {
			err = msgp.WrapError(err, "MaxDatagramFrameSize")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransportParameters) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "InitialMaxStreamDataBidiLocal"
	o = append(o, 0x8b, 0xbd, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x64, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x6c)
	if z.InitialMaxStreamDataBidiLocal == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.InitialMaxStreamDataBidiLocal)
	}
	// string "InitialMaxStreamDataBidiRemote"
	o = append(o, 0xbe, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x64, 0x69, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65)
	if z.InitialMaxStreamDataBidiRemote == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.InitialMaxStreamDataBidiRemote)
	}
	// string "InitialMaxStreamDataUni"
	o = append(o, 0xb7, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69)
	if z.InitialMaxStreamDataUni == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.InitialMaxStreamDataUni)
	}
	// string "MaxAckDelay"
	o = append(o, 0xab, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79)
	if z.MaxAckDelay == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.MaxAckDelay)
	}
	// string "AckDelayExponent"
	o = append(o, 0xb0, 0x41, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74)
	if z.AckDelayExponent == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendUint8(o, *z.AckDelayExponent)
	}
	// string "DisableActiveMigration"
	o = append(o, 0xb6, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if z.DisableActiveMigration == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBool(o, *z.DisableActiveMigration)
	}
	// string "MaxUDPPayloadSize"
	o = append(o, 0xb1, 0x4d, 0x61, 0x78, 0x55, 0x44, 0x50, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65)
	if z.MaxUDPPayloadSize == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.MaxUDPPayloadSize)
	}
	// string "MaxIdleTimeout"
	o = append(o, 0xae, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74)
	if z.MaxIdleTimeout == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.MaxIdleTimeout)
	}
	// string "OriginalDestinationConnectionID"
	o = append(o, 0xbf, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if z.OriginalDestinationConnectionID == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, *z.OriginalDestinationConnectionID)
	}
	// string "ActiveConnectionIDLimit"
	o = append(o, 0xb7, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendUint64(o, z.ActiveConnectionIDLimit)
	// string "MaxDatagramFrameSize"
	o = append(o, 0xb4, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65)
	if z.MaxDatagramFrameSize == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendInt64(o, *z.MaxDatagramFrameSize)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransportParameters) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "InitialMaxStreamDataBidiLocal":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.InitialMaxStreamDataBidiLocal = nil
			} else {
				if z.InitialMaxStreamDataBidiLocal == nil {
					z.InitialMaxStreamDataBidiLocal = new(int64)
				}
				*z.InitialMaxStreamDataBidiLocal, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataBidiLocal")
					return
				}
			}
		case "InitialMaxStreamDataBidiRemote":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.InitialMaxStreamDataBidiRemote = nil
			} else {
				if z.InitialMaxStreamDataBidiRemote == nil {
					z.InitialMaxStreamDataBidiRemote = new(int64)
				}
				*z.InitialMaxStreamDataBidiRemote, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataBidiRemote")
					return
				}
			}
		case "InitialMaxStreamDataUni":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.InitialMaxStreamDataUni = nil
			} else {
				if z.InitialMaxStreamDataUni == nil {
					z.InitialMaxStreamDataUni = new(int64)
				}
				*z.InitialMaxStreamDataUni, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "InitialMaxStreamDataUni")
					return
				}
			}
		case "MaxAckDelay":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MaxAckDelay = nil
			} else {
				if z.MaxAckDelay == nil {
					z.MaxAckDelay = new(int64)
				}
				*z.MaxAckDelay, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MaxAckDelay")
					return
				}
			}
		case "AckDelayExponent":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AckDelayExponent = nil
			} else {
				if z.AckDelayExponent == nil {
					z.AckDelayExponent = new(uint8)
				}
				*z.AckDelayExponent, bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AckDelayExponent")
					return
				}
			}
		case "DisableActiveMigration":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DisableActiveMigration = nil
			} else {
				if z.DisableActiveMigration == nil {
					z.DisableActiveMigration = new(bool)
				}
				*z.DisableActiveMigration, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DisableActiveMigration")
					return
				}
			}
		case "MaxUDPPayloadSize":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MaxUDPPayloadSize = nil
			} else {
				if z.MaxUDPPayloadSize == nil {
					z.MaxUDPPayloadSize = new(int64)
				}
				*z.MaxUDPPayloadSize, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MaxUDPPayloadSize")
					return
				}
			}
		case "MaxIdleTimeout":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MaxIdleTimeout = nil
			} else {
				if z.MaxIdleTimeout == nil {
					z.MaxIdleTimeout = new(int64)
				}
				*z.MaxIdleTimeout, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MaxIdleTimeout")
					return
				}
			}
		case "OriginalDestinationConnectionID":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.OriginalDestinationConnectionID = nil
			} else {
				if z.OriginalDestinationConnectionID == nil {
					z.OriginalDestinationConnectionID = new([]byte)
				}
				*z.OriginalDestinationConnectionID, bts, err = msgp.ReadBytesBytes(bts, *z.OriginalDestinationConnectionID)
				if err != nil {
					err = msgp.WrapError(err, "OriginalDestinationConnectionID")
					return
				}
			}
		case "ActiveConnectionIDLimit":
			z.ActiveConnectionIDLimit, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActiveConnectionIDLimit")
				return
			}
		case "MaxDatagramFrameSize":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MaxDatagramFrameSize = nil
			} else {
				if z.MaxDatagramFrameSize == nil {
					z.MaxDatagramFrameSize = new(int64)
				}
				*z.MaxDatagramFrameSize, bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MaxDatagramFrameSize")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransportParameters) Msgsize() (s int) {
	s = 1 + 30
	if z.InitialMaxStreamDataBidiLocal == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 31
	if z.InitialMaxStreamDataBidiRemote == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 24
	if z.InitialMaxStreamDataUni == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 12
	if z.MaxAckDelay == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 17
	if z.AckDelayExponent == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Uint8Size
	}
	s += 23
	if z.DisableActiveMigration == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BoolSize
	}
	s += 18
	if z.MaxUDPPayloadSize == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 15
	if z.MaxIdleTimeout == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	s += 32
	if z.OriginalDestinationConnectionID == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(*z.OriginalDestinationConnectionID)
	}
	s += 24 + msgp.Uint64Size + 21
	if z.MaxDatagramFrameSize == nil {
		s += msgp.NilSize
	} else {
		s += msgp.Int64Size
	}
	return
}
