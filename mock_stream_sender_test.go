// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quic-go/quic-go (interfaces: StreamSender)
//
// Generated by this command:
//
//	mockgen -typed -build_flags=-tags=gomock -package quic -self_package github.com/quic-go/quic-go -destination mock_stream_sender_test.go github.com/quic-go/quic-go StreamSender
//

// Package quic is a generated GoMock package.
package quic

import (
	reflect "reflect"

	protocol "github.com/quic-go/quic-go/internal/protocol"
	wire "github.com/quic-go/quic-go/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamSender is a mock of StreamSender interface.
type MockStreamSender struct {
	ctrl     *gomock.Controller
	recorder *MockStreamSenderMockRecorder
}

// MockStreamSenderMockRecorder is the mock recorder for MockStreamSender.
type MockStreamSenderMockRecorder struct {
	mock *MockStreamSender
}

// NewMockStreamSender creates a new mock instance.
func NewMockStreamSender(ctrl *gomock.Controller) *MockStreamSender {
	mock := &MockStreamSender{ctrl: ctrl}
	mock.recorder = &MockStreamSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamSender) EXPECT() *MockStreamSenderMockRecorder {
	return m.recorder
}

// onHasStreamData mocks base method.
func (m *MockStreamSender) onHasStreamData(arg0 protocol.StreamID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onHasStreamData", arg0)
}

// onHasStreamData indicates an expected call of onHasStreamData.
func (mr *MockStreamSenderMockRecorder) onHasStreamData(arg0 any) *MockStreamSenderonHasStreamDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onHasStreamData", reflect.TypeOf((*MockStreamSender)(nil).onHasStreamData), arg0)
	return &MockStreamSenderonHasStreamDataCall{Call: call}
}

// MockStreamSenderonHasStreamDataCall wrap *gomock.Call
type MockStreamSenderonHasStreamDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamSenderonHasStreamDataCall) Return() *MockStreamSenderonHasStreamDataCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamSenderonHasStreamDataCall) Do(f func(protocol.StreamID)) *MockStreamSenderonHasStreamDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamSenderonHasStreamDataCall) DoAndReturn(f func(protocol.StreamID)) *MockStreamSenderonHasStreamDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// onStreamCompleted mocks base method.
func (m *MockStreamSender) onStreamCompleted(arg0 protocol.StreamID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onStreamCompleted", arg0)
}

// onStreamCompleted indicates an expected call of onStreamCompleted.
func (mr *MockStreamSenderMockRecorder) onStreamCompleted(arg0 any) *MockStreamSenderonStreamCompletedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onStreamCompleted", reflect.TypeOf((*MockStreamSender)(nil).onStreamCompleted), arg0)
	return &MockStreamSenderonStreamCompletedCall{Call: call}
}

// MockStreamSenderonStreamCompletedCall wrap *gomock.Call
type MockStreamSenderonStreamCompletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamSenderonStreamCompletedCall) Return() *MockStreamSenderonStreamCompletedCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamSenderonStreamCompletedCall) Do(f func(protocol.StreamID)) *MockStreamSenderonStreamCompletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamSenderonStreamCompletedCall) DoAndReturn(f func(protocol.StreamID)) *MockStreamSenderonStreamCompletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// onStreamDataReadByApplication mocks base method.
func (m *MockStreamSender) onStreamDataReadByApplication(arg0 protocol.StreamID, arg1 uint64, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onStreamDataReadByApplication", arg0, arg1, arg2)
}

// onStreamDataReadByApplication indicates an expected call of onStreamDataReadByApplication.
func (mr *MockStreamSenderMockRecorder) onStreamDataReadByApplication(arg0, arg1, arg2 any) *MockStreamSenderonStreamDataReadByApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onStreamDataReadByApplication", reflect.TypeOf((*MockStreamSender)(nil).onStreamDataReadByApplication), arg0, arg1, arg2)
	return &MockStreamSenderonStreamDataReadByApplicationCall{Call: call}
}

// MockStreamSenderonStreamDataReadByApplicationCall wrap *gomock.Call
type MockStreamSenderonStreamDataReadByApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamSenderonStreamDataReadByApplicationCall) Return() *MockStreamSenderonStreamDataReadByApplicationCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamSenderonStreamDataReadByApplicationCall) Do(f func(protocol.StreamID, uint64, int)) *MockStreamSenderonStreamDataReadByApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamSenderonStreamDataReadByApplicationCall) DoAndReturn(f func(protocol.StreamID, uint64, int)) *MockStreamSenderonStreamDataReadByApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// onStreamDataWrittenByApplication mocks base method.
func (m *MockStreamSender) onStreamDataWrittenByApplication(arg0 protocol.StreamID, arg1 uint64, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onStreamDataWrittenByApplication", arg0, arg1, arg2)
}

// onStreamDataWrittenByApplication indicates an expected call of onStreamDataWrittenByApplication.
func (mr *MockStreamSenderMockRecorder) onStreamDataWrittenByApplication(arg0, arg1, arg2 any) *MockStreamSenderonStreamDataWrittenByApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onStreamDataWrittenByApplication", reflect.TypeOf((*MockStreamSender)(nil).onStreamDataWrittenByApplication), arg0, arg1, arg2)
	return &MockStreamSenderonStreamDataWrittenByApplicationCall{Call: call}
}

// MockStreamSenderonStreamDataWrittenByApplicationCall wrap *gomock.Call
type MockStreamSenderonStreamDataWrittenByApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamSenderonStreamDataWrittenByApplicationCall) Return() *MockStreamSenderonStreamDataWrittenByApplicationCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamSenderonStreamDataWrittenByApplicationCall) Do(f func(protocol.StreamID, uint64, int)) *MockStreamSenderonStreamDataWrittenByApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamSenderonStreamDataWrittenByApplicationCall) DoAndReturn(f func(protocol.StreamID, uint64, int)) *MockStreamSenderonStreamDataWrittenByApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// queueControlFrame mocks base method.
func (m *MockStreamSender) queueControlFrame(arg0 wire.Frame) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "queueControlFrame", arg0)
}

// queueControlFrame indicates an expected call of queueControlFrame.
func (mr *MockStreamSenderMockRecorder) queueControlFrame(arg0 any) *MockStreamSenderqueueControlFrameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "queueControlFrame", reflect.TypeOf((*MockStreamSender)(nil).queueControlFrame), arg0)
	return &MockStreamSenderqueueControlFrameCall{Call: call}
}

// MockStreamSenderqueueControlFrameCall wrap *gomock.Call
type MockStreamSenderqueueControlFrameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamSenderqueueControlFrameCall) Return() *MockStreamSenderqueueControlFrameCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamSenderqueueControlFrameCall) Do(f func(wire.Frame)) *MockStreamSenderqueueControlFrameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamSenderqueueControlFrameCall) DoAndReturn(f func(wire.Frame)) *MockStreamSenderqueueControlFrameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
